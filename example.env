# (Optional)
# Set this variable if you want to pull the xilinx-labtools-docker image from a remote registry rather than building locally
# Any value provided here will also be automatically propagated into the sn-stack/.env file during the build to ensure
# consistency between the build image and the runtime image.
#LABTOOLS_IMAGE_URI=wharf.es.net/ht/xilinx-labtools-docker:62879-gc43e5fb5

# (optional) Hardware Repo Group
#  - This can be used to provide additional information about the group owning the code repository
#    that was used to produce this hardware build
#  - This can be left commented out if not relevant
#SN_HW_GROUP=

# (optional) Hardware Repo
#  - This can be used to provide additional information about which code repository was used
#    to produce this hardware build
#  - This can be left commented out if not relevant
#SN_HW_REPO=

# (optional) Hardware Branch
#  - This can be used to provide additional information about which code branch was used
#    to produce this hardware build
#  - This can be left commented out if not relevant
#SN_HW_BRANCH=main

# (Required) Hardware Application Name
#  - Used to select the esnet-smartnic-hw artifact to build against
#  - This is commonly the same name as the git repository that holds your smartnic plugin
#  - Selects the artifact zip file from the sn-hw directory
#SN_HW_APP_NAME=esnet-smartnic-ht

# (Required) Hardware Board Variant
#  - Used to select the esnet-smartnic-hw artifact to build against
#  - Selects the artifact zip file from the sn-hw directory
#  - Examples: au280 au55c au250
#SN_HW_BOARD=au280

# (Required) Hardware Version
#  - Used to select the esnet-smartnic-hw artifact to build against
#  - Selects the artifact zip file from the sn-hw directory
#SN_HW_VER=0

# (Optional) Hardware commit hash
#  - This can be used to provide additional information about which code revision was used
#    to produce this hardware build
#  - This can be left commented out if not relevant
#SN_HW_COMMIT=

# (optional) Firmware Repo Group
#  - This can be used to provide additional information about the group owning the code repository
#    that was used to produce this firmware build
#  - This can be left commented out if not relevant
#SN_FW_GROUP=

# (optional) Firmware Repo
#  - This can be used to provide additional information about which code repository was used
#    to produce this firmware build
#  - This can be left commented out if not relevant
#SN_FW_REPO=esnet-smartnic-fw

# (optional) Firmware Branch
#  - This can be used to provide additional information about which code branch was used
#    to produce this firmware build
#  - This can be left commented out if not relevant
#SN_FW_BRANCH=main

# (optional) Firmware Application Name
#  - This can be used to provide the name of the firmware application that was built
#  - Typically set to the same value as the Hardware Application Name
#  - This can be left commented out if not relevant
#SN_FW_APP_NAME=$SN_HW_APP_NAME

# (Optional) Firmware Version
#  - Used to provide additional information about the version of the firmware artifact produced by this build
#  - Typically set to a unique version number generated during a CI build
#  - This can be left commented out if not relevant
#SN_FW_VER=

# (Optional) Firmware commit hash
#  - This can be used to provide additional information about which code revision was used
#    to produce this firmware build
#  - This can be left commented out if not relevant
#SN_FW_COMMIT=

# (Optional) DPDK Platform
#  - Ref: https://doc.dpdk.org/guides/linux_gsg/build_dpdk.html#adjusting-build-options
#  - This can be used to override the target platform used when compiling the DPDK libraries, drivers and applications
#    - Setting this to 'native' will target the specific CPU platform in the build machine
#    - NOTE that 'native' builds on Intel systems are unlikely to run on AMD systems and vice-versa
#  - If left commented out, the build target will be set to 'generic' which will target a recent, but generic x86_64 CPU platform
#    - This default setting will typically allow the container image to run on both Intel and AMD systems
#  If unsure, leave this option unset to get a 'generic' build
#DPDK_PLATFORM=generic
#DPDK_PLATFORM=native

# (Optional) DPDK CPU Instruction Set
#  - Ref: https://github.com/DPDK/dpdk/blob/main/config/meson.build#L113
#  - This can be used to further select a specific CPU instruction set to target when building a 'native' build (see DPDK Platform above)
#    - Setting this value should be combined with setting DPDK_PLATFORM=native
#    - NOTE that 'native' builds on Intel systems are unlikely to run on AMD systems and vice-versa
#  - If left commented out, the target CPU instruction set will be set to 'auto' which will select the CPU instruction set based on the
#    configuration of DPDK Platform above
#  If unsure, leave this option unset to have the CPU instruction set selected based on DPDK Platform (above)
#DPDK_CPU_INSTRUCTION_SET=auto
#DPDK_CPU_INSTRUCTION_SET=native
#DPDK_CPU_INSTRUCTION_SET=cascadelake
#DPDK_CPU_INSTRUCTION_SET=znver2
