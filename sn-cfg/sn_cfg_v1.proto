//--------------------------------------------------------------------------------------------------
syntax = "proto3";

//--------------------------------------------------------------------------------------------------
enum ErrorCode {
    // General error codes.
    EC_UNKNOWN = 0; // Field is unset.
    EC_OK = 1;

    // Batch error codes.
    EC_UNKNOWN_BATCH_REQUEST = 100;
    EC_UNKNOWN_BATCH_OP = 101;

    // Device configuration error codes.
    EC_INVALID_DEVICE_ID = 200;

    // Host configuration error codes.
    EC_INVALID_HOST_ID = 300;
    EC_MISSING_HOST_CONFIG = 301;
}

//--------------------------------------------------------------------------------------------------
message DevicePciInfo {
    string bus_id = 1;
    uint32 vendor_id = 2; // Only low 16-bits are valid (uint16 not supported by protobuf).
    uint32 device_id = 3; // Only low 16-bits are valid (uint16 not supported by protobuf).
}

message DeviceBuildInfo {
    uint32 number = 1; // Value from syscfg.usr_access.
    uint32 status = 2; // Value from syscfg.build_status.
    repeated uint32 dna = 3; // Array of length 3, value from syscfg.dna[3] (same ordering).
}

message DeviceInfo {
    DevicePciInfo pci = 1;
    DeviceBuildInfo build = 2;
}

message DeviceInfoRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
}

message DeviceInfoResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
    DeviceInfo info = 3;
}

message DeviceSystemMonitor {
    uint32 index = 1; // System monitor index.
    float temperature = 2; // Value from sysmon0.temperature.
}

message DeviceStatus {
    repeated DeviceSystemMonitor sysmons = 1; // One per valid system monitor.
}

message DeviceStatusRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
}

message DeviceStatusResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
    DeviceStatus status = 3;
}

//--------------------------------------------------------------------------------------------------
message HostDmaConfig {
    uint32 base_queue = 1;
    uint32 num_queues = 2;
}

message HostConfig {
    HostDmaConfig dma = 1;
}

message HostConfigRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
    sint32 host_id = 2; // 0-based index. Set to -1 for all host interfaces.

    // Configuration data used for set operations. Leave unset for get operations.
    HostConfig config = 3;
}

message HostConfigResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
    uint32 host_id = 3;

    // Configuration data returned on get operations. Will be unset for set operations.
    HostConfig config = 4;
}

//--------------------------------------------------------------------------------------------------
enum BatchOperation {
    BOP_UNKNOWN = 0; // Field is unset.
    BOP_GET = 1;
    BOP_SET = 2;
}

message BatchRequest {
    BatchOperation op = 1;

    // Field IDs 2-9 are reserved for future use.

    oneof item {
        // General device configuration.
        DeviceInfoRequest device_info = 10;
        DeviceStatusRequest device_status = 11;

        // Host configuration.
        HostConfigRequest host_config = 20;
    };
}

message BatchResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.

    // Field IDs 2-9 are reserved for future use.

    oneof item {
        // General device configuration.
        DeviceInfoResponse device_info = 10;
        DeviceStatusResponse device_status = 11;

        // Host configuration.
        HostConfigResponse host_config = 20;
    };
}

//--------------------------------------------------------------------------------------------------
service SmartnicConfig {
    // Batching of multiple RPCs.
    rpc Batch(stream BatchRequest) returns (stream BatchResponse);

    // General device configuration.
    rpc GetDeviceInfo(DeviceInfoRequest) returns (stream DeviceInfoResponse);
    rpc GetDeviceStatus(DeviceStatusRequest) returns (stream DeviceStatusResponse);

    // Host configuration.
    rpc GetHostConfig(HostConfigRequest) returns (stream HostConfigResponse);
    rpc SetHostConfig(HostConfigRequest) returns (stream HostConfigResponse);
}
