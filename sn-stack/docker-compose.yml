x-labtools-service: &labtools-service
  image: ${LABTOOLS_IMAGE_URI-xilinx-labtools-docker:$USER-dev}
  restart: unless-stopped

x-smartnic-fw-service: &smartnic-fw-service
  image: ${SMARTNIC_FW_IMAGE_URI-esnet-smartnic-fw:$USER-dev}
  restart: unless-stopped

x-smartnic-dpdk-service: &smartnic-dpdk-service
  image: ${SMARTNIC_DPDK_IMAGE_URI-smartnic-dpdk-docker:$USER-dev}
  restart: unless-stopped

services:
  xilinx-hwserver:
    <<: *labtools-service
    hostname: xilinx-hwswerver
    init: true
    user: root
    privileged: true
    ports:
      - "${HW_SERVER_PORT-3121}:3121"
    volumes:
      - /dev:/dev
      - /sys/bus/usb:/sys/bus/usb
    healthcheck:
      test: ["CMD", "/bin/bash", "-c", "-e", "-o", "pipefail", "netstat -nlt | fgrep '0.0.0.0:3121'"]
      interval: 10s
      timeout: 10s
      retries: 6
      start_period: 3s
    command:
      - /bin/bash
      - -c
      - -e
      - -o
      - pipefail
      - -x
      - |
        hw_server \
          -S \
          -s \
          tcp::3121 \
          -e "set auto-open-ports 0" \
          -e "set jtag-port-filter ${HW_TARGET_SERIAL:-Xilinx/}"

  smartnic-unpack:
    <<: *smartnic-fw-service
    hostname: smartnic-unpack
    init: true
    user: root
    volumes:
      - bitfiles:/bitfiles
    network_mode: none
    entrypoint:
      - /bin/bash
      - -c
      - -e
      - -o
      - pipefail
      - -x
      - |
        rm -f /bitfiles/ok
        cp -a /usr/local/lib/firmware/esnet-smartnic/esnet-smartnic.{bit,mcs} /bitfiles
        touch /bitfiles/ok
        sleep infinity

  smartnic-flash-jtag:
    <<: *labtools-service
    hostname: smartnic-flash-jtag
    init: true
    user: root
    privileged: true
    environment:
      - FPGA_PCIE_DEV=$FPGA_PCIE_DEV
    depends_on:
      smartnic-unpack:
        condition: service_started
    volumes:
      - bitfiles:/bitfiles:ro
      - ${SN_STACK_ROOT-.}/smartnic-hw/scripts:/scripts:ro
    network_mode: none
    command:
      - /bin/bash
      - -c
      - -e
      - -o
      - pipefail
      - -x
      - |
        while [ ! -e /bitfiles/ok ] ; do
          echo "Waiting for bitfiles to be unpacked..."
          sleep 1
        done
        /scripts/program_flash.sh \
          localhost:3121 \
          "${HW_TARGET_SERIAL:-*}" \
          /bitfiles/esnet-smartnic.mcs \
          $FPGA_PCIE_DEV
        file /bitfiles/esnet-smartnic.bit
        if [ $$? ] ; then
          # Flash update has succeeded, all OK
          echo "Flash Update Successful"
          exit 0
        else
          echo "Flash Update Attempted and Failed, Not Healthy!"
          exit 1
        fi
    profiles:
      - smartnic-flash

  smartnic-flash:
    <<: *labtools-service
    hostname: smartnic-flash
    init: true
    user: root
    privileged: true
    environment:
      - FPGA_PCIE_DEV=$FPGA_PCIE_DEV
    depends_on:
      smartnic-unpack:
        condition: service_started
    volumes:
      - bitfiles:/bitfiles:ro
    network_mode: none
    command:
      - /bin/bash
      - -c
      - -e
      - -o
      - pipefail
      - -x
      - |
        while [ ! -e /bitfiles/ok ] ; do
          echo "Waiting for bitfiles to be unpacked..."
          sleep 1
        done
        file /bitfiles/esnet-smartnic.bit
        printf "\n" | xbflash2 program --spi --image /bitfiles/esnet-smartnic.mcs -d $${FPGA_PCIE_DEV}.0 -b 2 -s 0x340000
        if [ $$? ] ; then
          # Flash update has succeeded, all OK
          echo "Flash Update Successful"
          exit 0
        else
          echo "Flash Update Attempted and Failed, Not Healthy!"
          exit 1
        fi
    profiles:
      - smartnic-flash

  smartnic-flash-reset-to-gold:
    <<: *labtools-service
    hostname: smartnic-flash-reset-to-gold
    init: true
    user: root
    privileged: true
    environment:
      - FPGA_PCIE_DEV=$FPGA_PCIE_DEV
    network_mode: none
    command:
      - /bin/bash
      - -c
      - -e
      - -o
      - pipefail
      - -x
      - |
        printf "\n" | xbflash2 program --spi --revert-to-golden -d $${FPGA_PCIE_DEV}.0 -b 2 -s 0x340000
        if [ $$? ] ; then
          # Flash update has succeeded, all OK
          echo "Card Successfully Reverted to Golden Image"
          exit 0
        else
          echo "Revert to Golden Image Attempted and Failed, Not Healthy!"
          exit 1
        fi
    profiles:
      - smartnic-flash

  smartnic-hw:
    <<: *labtools-service
    hostname: smartnic-hw
    depends_on:
      xilinx-hwserver:
        condition: service_healthy
      smartnic-unpack:
        condition: service_started
    init: true
    user: root
    privileged: true
    environment:
      - FPGA_PCIE_DEV=$FPGA_PCIE_DEV
    tmpfs:
      - /status
    volumes:
      - bitfiles:/bitfiles:ro
      - ${SN_STACK_ROOT-.}/smartnic-hw/scripts:/scripts:ro
    healthcheck:
      test: ["CMD-SHELL", "/usr/bin/test -e /status/ok"]
      interval: 10s
      timeout: 10s
      retries: 6
      start_period: 10s
    command:
      - /bin/bash
      - -c
      - -e
      - -o
      - pipefail
      - -x
      - |
        if [ ! -e /bitfiles/ok ] ; then
          exit 1
        fi
        /scripts/program_card.sh \
          xilinx-hwserver:3121 \
          "${HW_TARGET_SERIAL:-*}" \
          /bitfiles/esnet-smartnic.bit \
          $FPGA_PCIE_DEV \
          # FORCE
        if [ $$? ] ; then
          touch /status/ok
          sleep infinity
        fi

  smartnic-devunbind:
    <<: *smartnic-fw-service
    hostname: smartnic-devunbind
    depends_on:
      smartnic-hw:
        condition: service_healthy
    init: true
    user: root
    privileged: true
    environment:
      - FPGA_PCIE_DEV=$FPGA_PCIE_DEV
    tmpfs:
      - /status
    volumes:
      - /sys/bus/pci:/sys/bus/pci
      - /sys/bus/pci/drivers:/sys/bus/pci/drivers
      - /dev:/dev
      - /lib/modules:/lib/modules
    healthcheck:
      test: ["CMD-SHELL", "/usr/bin/test -e /status/ok"]
      interval: 10s
      timeout: 10s
      retries: 6
      start_period: 5s
    entrypoint:
      - /bin/bash
      - -c
      - -e
      - -o
      - pipefail
      - -x
      - |
        echo 1 > /sys/bus/pci/rescan
        sleep 1
        # Unbind the kernel driver (if any) from each FPGA PF
        dpdk-devbind.py -u $$FPGA_PCIE_DEV.0 $$FPGA_PCIE_DEV.1
        dpdk-devbind.py --status
        # Manually enable device memory since there is no device driver in this mode
        setpci -s $FPGA_PCIE_DEV.0 COMMAND=0x2
        setpci -s $FPGA_PCIE_DEV.1 COMMAND=0x2
        touch /status/ok
        sleep infinity
    profiles:
      - smartnic-no-vfio

  smartnic-devbind:
    <<: *smartnic-fw-service
    hostname: smartnic-devbind
    depends_on:
      smartnic-hw:
        condition: service_healthy
    init: true
    user: root
    privileged: true
    environment:
      - FPGA_PCIE_DEV=$FPGA_PCIE_DEV
    tmpfs:
      - /status
    volumes:
      - /sys/bus/pci:/sys/bus/pci
      - /sys/bus/pci/drivers:/sys/bus/pci/drivers
      - /dev:/dev
      - /lib/modules:/lib/modules
    healthcheck:
      test: ["CMD-SHELL", "/usr/bin/test -e /status/ok"]
      interval: 10s
      timeout: 10s
      retries: 6
      start_period: 5s
    entrypoint:
      - /bin/bash
      - -c
      - -e
      - -o
      - pipefail
      - -x
      - |
        echo 1 > /sys/bus/pci/rescan
        sleep 1
        # Bind the vfio-pci driver to each FPGA PF
        dpdk-devbind.py -b vfio-pci $$FPGA_PCIE_DEV.0 $$FPGA_PCIE_DEV.1
        dpdk-devbind.py --status
        # Confirm that the driver is properly bound to each FPGA PF
        # Note the <TAB> before vfio-pci in the grep command
        lspci -D -kvm -s $$FPGA_PCIE_DEV.0 | grep '^Driver:	vfio-pci'
        lspci -D -kvm -s $$FPGA_PCIE_DEV.1 | grep '^Driver:	vfio-pci'
        touch /status/ok
        sleep infinity
    profiles:
      - smartnic-mgr-user
      - smartnic-mgr-dpdk-manual
      - smartnic-mgr-vfio-unlock
      # Note: the smartnic-dpdk profile is deprecated and will be removed
      - smartnic-dpdk

  smartnic-vfio-unlock:
    <<: *smartnic-fw-service
    hostname: smartnic-vfio-unlock
    init: true
    user: root
    privileged: true
    depends_on:
      smartnic-devbind:
        condition: service_healthy
    environment:
      # Tell python to do unbuffered IO to stdout
      - PYTHONUNBUFFERED=1
      - VFIO_UNLOCK_SELECT=$FPGA_PCIE_DEV.0
      - VFIO_UNLOCK_BAR=2
    volumes:
      - /sys/bus/pci:/sys/bus/pci
      - /dev/vfio:/dev/vfio
      - ${SN_STACK_ROOT-${PWD}}/smartnic-vfio-unlock/scripts:/scripts
    entrypoint:
      - /bin/bash
      - -c
      - -e
      - -o
      - pipefail
      - -x
      - /scripts/vfio-unlock.py
    profiles:
      - smartnic-mgr-vfio-unlock


  smartnic-dpdk:
    <<: *smartnic-dpdk-service
    hostname: smartnic-dpdk
    init: true
    user: root
    privileged: true
    depends_on:
      smartnic-devbind:
        condition: service_healthy
    environment:
      - SN_PCIE_DEV=$FPGA_PCIE_DEV
      - SN_DEV_PCIEADDR=$FPGA_PCIE_DEV.0
    volumes:
      - /sys/bus/pci:/sys/bus/pci
      - /var/run/dpdk:/var/run/dpdk
      - /sys/devices/system/node:/sys/devices/system/node
      - /sys/bus/pci/drivers:/sys/bus/pci/drivers
      - /dev:/dev
      - /sys/kernel/mm/hugepages:/sys/kernel/mm/hugepages
      - /lib/modules:/lib/modules
      - ${SN_STACK_ROOT-${PWD}}/scratch:/scratch
    entrypoint:
      - /bin/bash
      - -c
      - -e
      - -o
      - pipefail
      - -x
      - |
        sleep infinity
    profiles:
      - smartnic-mgr-dpdk-manual
      # Note: the smartnic-dpdk profile is deprecated and will be removed
      - smartnic-dpdk

  smartnic-fw:
    <<: *smartnic-fw-service
    hostname: smartnic-fw
    depends_on:
      smartnic-hw:
        condition: service_healthy
    init: true
    user: root
    privileged: true
    restart: unless-stopped
    environment:
      - REGIO_SELECT=$FPGA_PCIE_DEV.0
      - REGIO_REGMAP=/usr/local/share/esnet-smartnic/esnet-smartnic-top-ir.yaml
      - SN_CLI_SLOTADDR=$FPGA_PCIE_DEV.0
      - SN_P4_CLI_SERVER=smartnic-p4
    volumes:
      - /sys/bus/pci:/sys/bus/pci
      - /dev:/dev
      - ${SN_STACK_ROOT-${PWD}}/scratch:/scratch
    entrypoint:
      - /bin/bash
      - -c
      - -e
      - -o
      - pipefail
      - -x
      - |
        sleep infinity

  smartnic-p4:
    <<: *smartnic-fw-service
    hostname: smartnic-p4
    depends_on:
      smartnic-hw:
        condition: service_healthy
    init: true
    user: root
    privileged: true
    restart: unless-stopped
    environment:
      - REGIO_SELECT=$FPGA_PCIE_DEV.0
      - SN_CLI_SLOTADDR=$FPGA_PCIE_DEV.0
      - SN_P4_AGENT_SLOTADDR=$FPGA_PCIE_DEV.0
    volumes:
      - /sys/bus/pci:/sys/bus/pci
      - /dev:/dev
      - ${SN_STACK_ROOT-${PWD}}/scratch:/scratch
    entrypoint:
      - /bin/bash
      - -c
      - -e
      - -o
      - pipefail
      - -x
      - |
        sn-p4-agent $$SN_P4_AGENT_SLOTADDR

volumes:
  # NOTE: If you're about to add a bind mount here and give it a name so that you don't repeat it
  #       in multiple service volume lists, STOP.  There is a subtle bug in the docker daemon where
  #       name volumes which are built on bind-mounts are not properly reference counted  when the
  #       docker daemon restarts *and* live-restore is enabled.  This is most noticable as a failure
  #       to delete the named volume when bringing down the stack (or after it's already down) IFF
  #       the docker daemon was restarted while the stack was previously running.
  #
  #       See: https://github.com/moby/moby/issues/44422

  bitfiles:

