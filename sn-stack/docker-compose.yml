x-labtools-service: &labtools-service
  image: ${LABTOOLS_IMAGE_URI-xilinx-labtools-docker:$USER-dev}
  restart: unless-stopped

x-smartnic-fw-service: &smartnic-fw-service
  image: ${SMARTNIC_FW_IMAGE_URI-esnet-smartnic-fw:$USER-dev}
  restart: unless-stopped

# https://github.com/traefik/traefik/releases
# https://traefik.io/traefik/
# https://hub.docker.com/_/traefik/
x-traefik-service: &traefik-service
  image: '${DOCKERHUB_PROXY-}library/traefik:3.4.1'
  restart: unless-stopped

# https://github.com/prometheus/prometheus/releases
x-prometheus-service: &prometheus-service
  image: '${DOCKERHUB_PROXY-}prom/prometheus:v3.4.2'
  restart: unless-stopped

services:
  xilinx-hwserver:
    <<: *labtools-service
    hostname: xilinx-hwswerver
    init: true
    user: root
    privileged: true
    #ports:
    #  - "${HW_SERVER_PORT-50000}:3121"
    expose:
      - 3121
    volumes:
      - /dev:/dev
      - /sys/bus/usb:/sys/bus/usb
    healthcheck:
      test: ["CMD", "/bin/bash", "-c", "-e", "-o", "pipefail", "netstat -nlt | fgrep '0.0.0.0:3121'"]
      interval: 10s
      timeout: 10s
      retries: 6
      start_period: 3s
    command:
      - /bin/bash
      - -c
      - -e
      - -o
      - pipefail
      - -x
      - |
        hw_server \
          -S \
          -s \
          tcp::3121 \
          -e "set auto-open-ports 0" \
          -e "set jtag-port-filter ${HW_TARGET_SERIAL:-Xilinx/}"

  xilinx-sc-console:
    <<: *smartnic-fw-service
    init: true
    user: root
    privileged: true
    restart: unless-stopped
    network_mode: none
    environment:
      - HW_TARGET_SERIAL=${HW_TARGET_SERIAL:-*}
    volumes:
      - /dev:/dev
    entrypoint:
      - /bin/bash
      - -c
      - -e
      - -o
      - pipefail
      - -x
      - |
        if [ "$$HW_TARGET_SERIAL" == "*" ] ; then
          export HW_USB_SERIAL="*"
        else
          # trim the extra trailing "A" from the quirky JTAG serial number to get the actual USB serial number
          export HW_USB_SERIAL="$${HW_TARGET_SERIAL%A}"
        fi
        ls -l /dev/serial/by-id/
        export HW_SC_UART_DEV="$$(ls /dev/serial/by-id/usb-Xilinx_*_$${HW_USB_SERIAL}-if01-port0)"
        echo "Logging console output from device $${HW_SC_UART_DEV}"
        [ -r $$HW_SC_UART_DEV ] || exit 1
        socat stdout $${HW_SC_UART_DEV},sane,rawer,b115200,cs8,parenb=0,igncr

  smartnic-unpack:
    <<: *smartnic-fw-service
    hostname: smartnic-unpack
    init: true
    user: root
    volumes:
      - bitfiles:/bitfiles
    network_mode: none
    entrypoint:
      - /bin/bash
      - -c
      - -e
      - -o
      - pipefail
      - -x
      - |
        rm -f /bitfiles/ok
        fw_dir=/usr/local/lib/firmware/esnet-smartnic
        for f in $${fw_dir}/esnet-smartnic.{bit,mcs} ; do
          if [ -e $${f}.zst ] ; then
            # input file is compressed, uncompress to output
            unzstd --force --output-dir-flat /bitfiles $${f}.zst
          else
            # input file is not compressed, just copy it to output
            cp -a $${f} /bitfiles
          fi
        done

        probes=$${fw_dir}/debug_nets.ltx
        if [ -e $${probes} ]; then
          cp -a $${probes} /bitfiles
        else
          # Cleanup leftovers in a pre-existing volume when moving
          # from an FPGA with VIOs to one without them.
          rm -f /bitfiles/$$(basename $${probes})
        fi

        touch /bitfiles/ok
        sleep infinity

  smartnic-flash-rescue:
    <<: *labtools-service
    hostname: smartnic-flash-rescue
    restart: no
    init: true
    user: root
    privileged: true
    environment:
      - FPGA_PCIE_DEV=$FPGA_PCIE_DEV
    depends_on:
      xilinx-hwserver:
        condition: service_healthy
      smartnic-unpack:
        condition: service_started
    volumes:
      - bitfiles:/bitfiles:ro
      - ${SN_STACK_ROOT-${PWD}}/smartnic-hw/scripts:/scripts:ro
    network_mode: none
    command:
      - /bin/bash
      - -c
      - -e
      - -o
      - pipefail
      - -x
      - |
        while [ ! -e /bitfiles/ok ] ; do
          echo "Waiting for bitfiles to be unpacked..."
          sleep 1
        done
        /scripts/program_flash.sh \
          localhost:3121 \
          "${HW_TARGET_SERIAL:-*}" \
          /bitfiles/esnet-smartnic.mcs \
          $FPGA_PCIE_DEV
        file /bitfiles/esnet-smartnic.bit
        if [ $$? ] ; then
          # Flash update has succeeded, all OK
          echo "Flash Update Successful"
          exit 0
        else
          echo "Flash Update Attempted and Failed, Not Healthy!"
          exit 1
        fi
    profiles:
      - smartnic-flash

  smartnic-flash-update:
    <<: *labtools-service
    restart: no
    hostname: smartnic-flash-update
    init: true
    user: root
    privileged: true
    environment:
      - FPGA_PCIE_DEV=$FPGA_PCIE_DEV
    volumes:
      - bitfiles:/bitfiles:ro
    network_mode: none
    command:
      - /bin/bash
      - -c
      - -e
      - -o
      - pipefail
      - -x
      - |
        while [ ! -e /bitfiles/ok ] ; do
          echo "Waiting for bitfiles to be unpacked..."
          sleep 1
        done
        file /bitfiles/esnet-smartnic.bit
        printf "\n" | xbflash2 program --spi --image /bitfiles/esnet-smartnic.mcs -d $${FPGA_PCIE_DEV}.0 -b 2 -s 0x20000
        if [ $$? ] ; then
          # Flash update has succeeded, all OK
          echo "Flash Update Successful"
          exit 0
        else
          echo "Flash Update Attempted and Failed, Not Healthy!"
          exit 1
        fi
    profiles:
      - smartnic-flash

  smartnic-flash-remove:
    <<: *labtools-service
    restart: no
    hostname: smartnic-flash-remove
    init: true
    user: root
    privileged: true
    environment:
      - FPGA_PCIE_DEV=$FPGA_PCIE_DEV
    network_mode: none
    command:
      - /bin/bash
      - -c
      - -e
      - -o
      - pipefail
      - -x
      - |
        printf "\n" | xbflash2 program --spi --revert-to-golden -d $${FPGA_PCIE_DEV}.0 -b 2 -s 0x20000
        if [ $$? ] ; then
          # Flash update has succeeded, all OK
          echo "Card Successfully Reverted to Golden Image"
          exit 0
        else
          echo "Revert to Golden Image Attempted and Failed, Not Healthy!"
          exit 1
        fi
    profiles:
      - smartnic-flash

  smartnic-hw:
    <<: *labtools-service
    hostname: smartnic-hw
    depends_on:
      xilinx-hwserver:
        condition: service_healthy
      smartnic-unpack:
        condition: service_started
    init: true
    user: root
    privileged: true
    environment:
      - FPGA_PCIE_DEV=$FPGA_PCIE_DEV
    tmpfs:
      - /status
    volumes:
      - bitfiles:/bitfiles:ro
      - ${SN_STACK_ROOT-${PWD}}/smartnic-hw/scripts:/scripts:ro
    healthcheck:
      test: ["CMD-SHELL", "/usr/bin/test -e /status/ok"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 10s
    command:
      - /bin/bash
      - -c
      - -e
      - -o
      - pipefail
      - -x
      - |
        if [ ! -e /bitfiles/ok ] ; then
          exit 1
        fi
        /scripts/program_card.sh \
          xilinx-hwserver:3121 \
          "${HW_TARGET_SERIAL:-*}" \
          /bitfiles/esnet-smartnic.bit \
          /bitfiles/debug_nets.ltx \
          $FPGA_PCIE_DEV \
          # FORCE
        if [ $$? ] ; then
          touch /status/ok
          sleep infinity
        fi
    profiles:
      - smartnic-mgr-dpdk-portlink
      - smartnic-mgr-dpdk-manual
      - smartnic-mgr-user
      - smartnic-mgr-vfio-unlock
      - smartnic-no-vfio

  smartnic-devunbind:
    <<: *smartnic-fw-service
    hostname: smartnic-devunbind
    depends_on:
      smartnic-hw:
        condition: service_healthy
    init: true
    user: root
    privileged: true
    environment:
      - FPGA_PCIE_DEV=$FPGA_PCIE_DEV
    tmpfs:
      - /status
    volumes:
      - /sys/bus/pci:/sys/bus/pci
      - /sys/bus/pci/drivers:/sys/bus/pci/drivers
      - /dev:/dev
      - /lib/modules:/lib/modules
    healthcheck:
      test: ["CMD-SHELL", "/usr/bin/test -e /status/ok"]
      interval: 10s
      timeout: 10s
      retries: 6
      start_period: 5s
    entrypoint:
      - /bin/bash
      - -c
      - -e
      - -o
      - pipefail
      - -x
      - |
        # Unbind the kernel driver (if any) from each FPGA PF
        dpdk-devbind.py -u $$FPGA_PCIE_DEV.0 $$FPGA_PCIE_DEV.1
        dpdk-devbind.py --status
        # Manually enable device memory since there is no device driver in this mode
        setpci -s $FPGA_PCIE_DEV.0 COMMAND=0x2
        setpci -s $FPGA_PCIE_DEV.1 COMMAND=0x2
        touch /status/ok
        sleep infinity
    profiles:
      - smartnic-no-vfio

  smartnic-devbind:
    <<: *smartnic-fw-service
    hostname: smartnic-devbind
    depends_on:
      smartnic-hw:
        condition: service_healthy
    init: true
    user: root
    privileged: true
    environment:
      - FPGA_PCIE_DEV=$FPGA_PCIE_DEV
    tmpfs:
      - /status
    volumes:
      - /sys/bus/pci:/sys/bus/pci
      - /sys/bus/pci/drivers:/sys/bus/pci/drivers
      - /dev:/dev
      - /lib/modules:/lib/modules
    healthcheck:
      test: ["CMD-SHELL", "/usr/bin/test -e /status/ok"]
      interval: 10s
      timeout: 10s
      retries: 6
      start_period: 5s
    entrypoint:
      - /bin/bash
      - -c
      - -e
      - -o
      - pipefail
      - -x
      - |
        # When vfio-pci is not builtin, ensure that it is loaded
        modinfo vfio-pci | egrep -q '^filename:\s+\(builtin\)$' || modprobe vfio-pci
        # Bind the vfio-pci driver to each FPGA PF
        dpdk-devbind.py -b vfio-pci $$FPGA_PCIE_DEV.0 $$FPGA_PCIE_DEV.1
        dpdk-devbind.py --status
        # Confirm that the driver is properly bound to each FPGA PF
        # Note the <TAB> before vfio-pci in the grep command
        lspci -D -kvm -s $$FPGA_PCIE_DEV.0 | grep '^Driver:	vfio-pci'
        lspci -D -kvm -s $$FPGA_PCIE_DEV.1 | grep '^Driver:	vfio-pci'
        touch /status/ok
        sleep infinity
    profiles:
      - smartnic-mgr-user
      - smartnic-mgr-dpdk-portlink
      - smartnic-mgr-dpdk-manual
      - smartnic-mgr-vfio-unlock

  smartnic-vfio-unlock:
    <<: *smartnic-fw-service
    hostname: smartnic-vfio-unlock
    init: true
    user: root
    privileged: true
    depends_on:
      smartnic-devbind:
        condition: service_healthy
    environment:
      # Tell python to do unbuffered IO to stdout
      - PYTHONUNBUFFERED=1
      - VFIO_UNLOCK_PF=$FPGA_PCIE_DEV.0 $FPGA_PCIE_DEV.1
      - VFIO_UNLOCK_VF=
      - VFIO_UNLOCK_BAR=2
    volumes:
      - /sys/bus/pci:/sys/bus/pci
      - /dev/vfio:/dev/vfio
      - ${SN_STACK_ROOT-${PWD}}/smartnic-vfio-unlock/scripts:/scripts:ro
    entrypoint:
      - /bin/bash
      - -c
      - -e
      - -o
      - pipefail
      - -x
      - /scripts/vfio-unlock.py
    profiles:
      - smartnic-mgr-vfio-unlock

  smartnic-dpdk:
    <<: *smartnic-fw-service
    hostname: smartnic-dpdk
    init: true
    user: root
    privileged: true
    depends_on:
      smartnic-devbind:
        condition: service_healthy
    environment:
      - SN_PCIE_DEV=$FPGA_PCIE_DEV
      - SN_DEV_PCIEADDR=$FPGA_PCIE_DEV.0
    volumes:
      - /sys/bus/pci:/sys/bus/pci
      - /var/run/dpdk:/var/run/dpdk
      - /sys/devices/system/node:/sys/devices/system/node
      - /sys/bus/pci/drivers:/sys/bus/pci/drivers
      - /dev:/dev
      - /sys/kernel/mm/hugepages:/sys/kernel/mm/hugepages
      - /lib/modules:/lib/modules
      - ${SN_STACK_ROOT-${PWD}}/scratch:/scratch
    entrypoint:
      - /bin/bash
      - -c
      - -e
      - -o
      - pipefail
      - -x
      - |
        sleep infinity
    profiles:
      - smartnic-mgr-dpdk-manual

  smartnic-dpdk-portlink:
    <<: *smartnic-fw-service
    hostname: smartnic-dpdk-portlink
    init: true
    user: root
    privileged: true
    depends_on:
      smartnic-devbind:
        condition: service_healthy
    volumes:
      - /sys/bus/pci:/sys/bus/pci
      - /var/run/dpdk:/var/run/dpdk
      - /sys/devices/system/node:/sys/devices/system/node
      - /sys/bus/pci/drivers:/sys/bus/pci/drivers
      - /dev:/dev
      - /sys/kernel/mm/hugepages:/sys/kernel/mm/hugepages
      - /lib/modules:/lib/modules
      - ${SN_STACK_ROOT-${PWD}}/scratch:/scratch
    entrypoint:
      - dpdk-testpmd
      - --file-prefix=sn-$FPGA_PCIE_DEV.0
      - --allow=$FPGA_PCIE_DEV.0
      - --allow=$FPGA_PCIE_DEV.1
      - --vdev=net_tap0,iface=sn-pf0
      - --vdev=net_tap1,iface=sn-pf1
      #- --log-level=lib.eal:debug
      - --
      #- --cmdline-file=/scratch/testpmd.cmds.txt
      - --port-topology=paired
      - --portlist=0,2,1,3
      - --forward-mode=io
      # The stats must be enabled or else dpdk-testpmd exits immediately after forwarding 1 packet
      - --stats-period=60
    profiles:
      - smartnic-mgr-dpdk-portlink

  smartnic-lldp:
    <<: *smartnic-fw-service
    init: true
    depends_on:
      smartnic-devbind:
        condition: service_healthy
    # Python needs a tty to print logs to stdout
    tty: true
    # Run in the same network namespace as the smartnic-dpdk-portlink container so this
    # service can send using the tap interfaces created there.  When embedding this stack
    # into another compose file that provides a different container with tap interfaces,
    # set the SN_PF_NETDEV_SERVICE env var to run this service in a different container context.
    network_mode: "service:${SN_PF_NETDEV_SERVICE:-smartnic-dpdk-portlink}"
    environment:
      - SN_LLDP_SLOTADDR=$FPGA_PCIE_DEV
      - SN_LLDP_HOST=${SN_HOST:-sn-host-unset}
      - SN_LLDP_TTL=20
    volumes:
      - ${SN_STACK_ROOT-${PWD}}/smartnic-lldp/scripts:/scripts:ro
      # scapy depends on protocols and services for part of its init
      - /etc/protocols:/etc/protocols
      - /etc/services:/etc/services
    entrypoint:
      - /scripts/sn_lldp.py
    profiles:
      - smartnic-mgr-dpdk-portlink

  smartnic-fw:
    <<: *smartnic-fw-service
    hostname: smartnic-fw
    depends_on:
      smartnic-hw:
        condition: service_healthy
    init: true
    user: root
    privileged: true
    restart: unless-stopped
    environment:
      - REGIO_ESNET_SMARTNIC_PCI_IDS=$FPGA_PCIE_DEV.0
      - SN_CFG_CLI_ADDRESS=smartnic-cfg
      - SN_CFG_CLI_TLS_INSECURE=true
      - SN_CFG_CLI_AUTH_TOKEN=${SN_CFG_AUTH_TOKEN?}
      - SN_P4_CLI_ADDRESS=smartnic-p4
      - SN_P4_CLI_TLS_INSECURE=true
      - SN_P4_CLI_AUTH_TOKEN=${SN_P4_AUTH_TOKEN?}
    volumes:
      - /sys/bus/pci:/sys/bus/pci
      - /dev:/dev
      - ${SN_STACK_ROOT-${PWD}}/scratch:/scratch
    entrypoint:
      - /bin/bash
      - -c
      - -e
      - -o
      - pipefail
      - -x
      - |
        sleep infinity
    profiles:
      - smartnic-mgr-dpdk-portlink
      - smartnic-mgr-dpdk-manual
      - smartnic-mgr-user
      - smartnic-mgr-vfio-unlock
      - smartnic-no-vfio

  smartnic-p4:
    <<: *smartnic-fw-service
    hostname: smartnic-p4
    depends_on:
      smartnic-hw:
        condition: service_healthy
        restart: true
    restart: unless-stopped
    init: true
    user: root
    privileged: true
    expose:
      - 50050
    environment:
      - REGIO_ESNET_SMARTNIC_PCI_IDS=$FPGA_PCIE_DEV.0
      - SN_P4_SERVER_AUTH_TOKENS=${SN_P4_AUTH_TOKEN}
      - SN_P4_SERVER_DEVICES=${FPGA_PCIE_DEV}.0
      - SN_SW_VER=${SN_SW_VER:-unset}

      # https://github.com/grpc/grpc/blob/master/TROUBLESHOOTING.md
      # https://github.com/grpc/grpc/blob/master/doc/trace_flags.md
      #- GRPC_TRACE=tsi,http #all
      #- GRPC_VERBOSITY=DEBUG
    volumes:
      - /sys/bus/pci:/sys/bus/pci
      - /dev:/dev
      - ${SN_STACK_ROOT-${PWD}}/scratch:/scratch
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-tls", "-tls-no-verify", "-addr", "[::]:50050"]
      interval: 10s
      timeout: 10s
      retries: 6
      start_period: 5s
    entrypoint:
      - /usr/local/sbin/sn-p4-server-entrypoint.sh
    labels:
      # Enable auto-discovery for traefik
      - 'traefik.enable=true'

      # Expose SmartnicP4 grpc API via traefik
      - 'traefik.http.routers.smartnic-p4.rule=PathPrefix(`/sn_p4.v2.SmartnicP4`)'
      - 'traefik.http.routers.smartnic-p4.service=smartnic-p4'

      # Define the internal service endpoint
      - 'traefik.http.services.smartnic-p4.loadbalancer.server.scheme=https'
    profiles:
      - smartnic-mgr-dpdk-portlink
      - smartnic-mgr-dpdk-manual
      - smartnic-mgr-user
      - smartnic-mgr-vfio-unlock
      - smartnic-no-vfio

  smartnic-cfg:
    <<: *smartnic-fw-service
    hostname: smartnic-cfg
    depends_on:
      smartnic-hw:
        condition: service_healthy
        restart: true
    restart: unless-stopped
    init: true
    user: root
    privileged: true
    expose:
      - 50100
    environment:
      - REGIO_ESNET_SMARTNIC_PCI_IDS=$FPGA_PCIE_DEV.0
      - SN_CFG_SERVER_AUTH_TOKENS=${SN_CFG_AUTH_TOKEN}
      - SN_CFG_SERVER_DEVICES=${FPGA_PCIE_DEV}.0
      - SN_SW_VER=${SN_SW_VER:-unset}

      # https://github.com/grpc/grpc/blob/master/TROUBLESHOOTING.md
      # https://github.com/grpc/grpc/blob/master/doc/trace_flags.md
      #- GRPC_TRACE=tsi,http #all
      #- GRPC_VERBOSITY=DEBUG
    volumes:
      - /sys/bus/pci:/sys/bus/pci
      - /dev:/dev
      - ${SN_STACK_ROOT-${PWD}}/scratch:/scratch
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-tls", "-tls-no-verify", "-addr", "[::]:50100"]
      interval: 10s
      timeout: 10s
      retries: 6
      start_period: 5s
    entrypoint:
      - /usr/local/sbin/sn-cfg-server-entrypoint.sh
    labels:
      # Enable auto-discovery for traefik
      - 'traefik.enable=true'

      # Expose SmartnicConfig grpc API via traefik
      - 'traefik.http.routers.smartnic-cfg.rule=PathPrefix(`/sn_cfg.v2.SmartnicConfig`)'
      - 'traefik.http.routers.smartnic-cfg.service=smartnic-cfg'

      # Expose grpc reflection API via traefik
      #- traefik.http.routers.smartnic-cfg-reflection.rule=PathPrefix(`/grpc.reflection.v1alpha.ServerReflection`)
      #- traefik.http.routers.smartnic-cfg-reflection.service=smartnic-cfg

      # Define the internal service endpoint
      - 'traefik.http.services.smartnic-cfg.loadbalancer.server.scheme=https'

    profiles:
      - smartnic-mgr-dpdk-portlink
      - smartnic-mgr-dpdk-manual
      - smartnic-mgr-user
      - smartnic-mgr-vfio-unlock
      - smartnic-no-vfio

  smartnic-fw-test:
    <<: *smartnic-fw-service
    restart: no
    hostname: smartnic-fw-test
    init: true
    user: root
    privileged: true
    environment:
      - REGIO_ESNET_SMARTNIC_PCI_IDS=$FPGA_PCIE_DEV.0
      - SN_CFG_CLI_ADDRESS=smartnic-cfg
      - SN_CFG_CLI_TLS_INSECURE=true
      - SN_CFG_CLI_AUTH_TOKEN=${SN_CFG_AUTH_TOKEN?}
      - SN_P4_CLI_ADDRESS=smartnic-p4
      - SN_P4_CLI_TLS_INSECURE=true
      - SN_P4_CLI_AUTH_TOKEN=${SN_P4_AUTH_TOKEN?}
    volumes:
      - /sys/bus/pci:/sys/bus/pci
      - /dev:/dev
      - ${SN_STACK_ROOT-${PWD}}/scratch:/scratch
      - ${SN_FW_TEST_ROOT-${SN_STACK_ROOT-${PWD}}/test/fw}:/test/fw:ro
      - ${SN_HW_TEST_ROOT-${SN_STACK_ROOT-${PWD}}/test/hw}:/test/hw:ro
    entrypoint:
      - /test/entrypoint.sh
    profiles:
      - smartnic-test

  traefik:
    <<: *traefik-service
    hostname: traefik
    ports:
      - "${SN_INGRESS_PORT-8440}:443"
      #- '8080:8080'
    networks:
      - default
    volumes:
      - ${SN_STACK_ROOT-${PWD}}/traefik:/etc/traefik:ro
      # Expose the docker socket to this container to allow for service auto-discovery
      - /var/run/docker.sock:/var/run/docker.sock
      # Import the host's TLS certificates
      - type: bind
        source: ${SN_INGRESS_TLS_HOST_DIR:-${SN_STACK_ROOT-${PWD}}/certs}
        target: /etc/letsencrypt
        read_only: true
        bind:
          create_host_path: false
    environment:
      - SN_INGRESS_TLS_FULLCHAIN=${SN_INGRESS_TLS_FULLCHAIN-}
      - SN_INGRESS_TLS_KEY=${SN_INGRESS_TLS_KEY-}
    healthcheck:
      test:
        - CMD
        - traefik
        - healthcheck
        - --ping
    command:
      # See: https://doc.traefik.io/traefik/
      # Note:
      #  * Configuration via command line parameters vs. yaml file are mutually exclusive
      #  * We use command line options here so allow templating in global config which doesn't work in yaml files
      #  * Using templating is required in order to ignore docker containers from outside of our compose stack (docker.constraints)

      # Turn off any outbound connections
      - --global.checkNewVersion=false
      - --global.sendAnonymousUsage=false

      # Set up Configuration Discovery via the docker provider
      #   Only consider containers that:
      #     * explicitly opt-in by setting label traefik.enable=true
      #     * are in the same docker stack with label com.docker.compose.project=$COMPOSE_PROJECT_NAME
      - --providers.docker.exposedByDefault=false
      - '--providers.docker.constraints=Label(`com.docker.compose.project`,`$COMPOSE_PROJECT_NAME`)'

      # Set up Configuration Discover via files for dynamic configuration changes (to detect TLS cert renewal)
      - --providers.file.directory=/etc/traefik/config.d
      - --providers.file.watch=true
      #- --providers.file.debugloggeneratedtemplate=true

      # Allow external connections to the reverse proxy
      - --entrypoints.smartnic_api.address=:443
      - --entrypoints.smartnic_api.http.tls=true

      # Disable TLS cert verification for internal services since they're all using self-signed certs.
      - --serversTransport.insecureSkipVerify=true

      # Enable prometheus metrics scrape endpoint for this daemon
      - --metrics.prometheus=true

      # Log all service accesses
      - --accesslog=${SN_INGRESS_ENABLE_ACCESS_LOG:-false}

      # Enable logging
      - --log.level=info
      #- --log.level=trace

      # Enable API and disable dashboard advertisement
      #- --api.dashboard=true
      - --api.insecure=true
      - --api.disabledashboardad=true

      # Provide a convenient health check service
      - --ping=true
    profiles:
      - smartnic-ingress

  prometheus:
    <<: *prometheus-service
    hostname: prometheus
    expose:
      - 9090
    networks:
      - default
    volumes:
      - ./prometheus:/etc/prometheus/
    command:
      - '--web.listen-address=0.0.0.0:9090'
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.external-url=/prometheus'
    labels:
      # Enable auto-discovery for traefik
      - 'traefik.enable=true'

      # Expose prometheus API via traefik
      - 'traefik.http.routers.prometheus-router.rule=PathPrefix(`/prometheus`)'
      - 'traefik.http.routers.prometheus-router.service=prometheus-service'

      # Define the internal service endpoint
      - 'traefik.http.services.prometheus-service.loadbalancer.server.scheme=http'
    profiles:
      - smartnic-metrics

volumes:
  # NOTE: If you're about to add a bind mount here and give it a name so that you don't repeat it
  #       in multiple service volume lists, STOP.  There is a subtle bug in the docker daemon where
  #       name volumes which are built on bind-mounts are not properly reference counted  when the
  #       docker daemon restarts *and* live-restore is enabled.  This is most noticable as a failure
  #       to delete the named volume when bringing down the stack (or after it's already down) IFF
  #       the docker daemon was restarted while the stack was previously running.
  #
  #       See: https://github.com/moby/moby/issues/44422

  bitfiles:

