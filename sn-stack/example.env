# This file can be copied to .env in the same directory to customize some of the
# behaviour of the docker-compose.yml file
#
# Note: The variables marked (Required) must be set in your .env file

# Choose **ONE OF** the available stack profiles
#  <empty> or unset           -->   xilinx-hwserver, smartnic-unpack, smartnic-hw, smartnic-fw, smartnic-p4
#  smartnic-no-vfio           -->   default + smartnic-devunbind (raw device memory access only, no vfio/iommu at all)
#  smartnic-mgr-user          -->   default + smartnic-devbind (vfio driver attached, user application must open vfio device)
#  smartnic-mgr-dpdk-manual   -->   default + smartnic-devbind + smartnic-dpdk (user must run pktgen in smartnic-dpdk-docker container)
#  smartnic-mgr-dpdk-portlink -->   default + smartnic-devbind + smartnic-dpdk-portlink (dpdk application opens vfio device)
#  smartnic-mgr-vfio-unlock   -->   default + smartnic-devbind + smartnic-vfio-unlock (python program opens vfio device)
#
# Use X if you want...
#  * smartnic-no-vfio: device access without using vfio or iommu (basic register access only)
#  * smartnic-mgr-vfio-unlock: a completely managed environment that provides access to regio/sn-cfg/sn-p4, no PCIe packet injection
#  * smartnic-mgr-dpdk-manual: to manually run pkgten in the smartnic-dpdk container to additionally tx/rx packets over PCIe
#  * smartnic-mgr-dpdk-portlink: dpdk managed environment with regio/sn-cfg/sn-p4, lldp tx *and* PCIe slow path via tap interfaces
#  * smartnic-mgr-user: to embed sn-stack under your own DPDK application
#
# **If you don't know what you want, pick "smartnic-mgr-vfio-unlock" below**
#
#COMPOSE_PROFILES=
#COMPOSE_PROFILES=smartnic-no-vfio
#COMPOSE_PROFILES=smartnic-mgr-user
#COMPOSE_PROFILES=smartnic-mgr-dpdk-manual
#COMPOSE_PROFILES=smartnic-mgr-dpdk-portlink
#COMPOSE_PROFILES=smartnic-mgr-vfio-unlock

# Optional additional components that can be added to the docker stack to provide more capabilities
# Note: These are implemented as additional profiles in order for them to be user-selectable

# Uncomment this line to enable exposing smartnic services to users running outside of the stack
# This will run a traefik reverse proxy which will proxy requests to the appropriate internal service.
#
# Note: This will automatically expose all enabled internal services to the outside world.
# Note: If you choose to enable this, please ensure that you have configured appropriate tokens to protect access.
#
# COMPOSE_PROFILES=${COMPOSE_PROFILES},smartnic-ingress

# Uncomment this line to enable a prometheus server which will automatically collec and aggregate metrics for all of the
# services within the docker stack.
#
# If you would additionally like to expose these metrics to external users, you'll also want to enable the `smartnic-ingress`
# profile elsewhere in this file.  These metrics will then be available externally via the `/prometheus` path on the
# `smartnic-ingress` service port.
#
# COMPOSE_PROFILES=${COMPOSE_PROFILES},smartnic-metrics

# (Optional)
# Helper to allow multiple (up to 10) instances of this docker stack to coexist on the same server without colliding on
# names, volumes, ports, etc.  You will still need to start each docker compose stack individually with a *different*
# value of the UNIQUE variable.  This setting DOES NOT itself automatically create/start multiple instances of the docker stack.
#
# Note: Setting this value to anything other than 0 will result in some of the services in the stack being exposed
#       on different port numbers than the defaults.  Please adjust your client programs accordingly.
#
# Set this to an integer value between 0 and 9
# UNIQUE=0

# (Optional) (Recommended)
# Append your username to the compose project name
#  - This helps to avoid collisions in docker object names when multiple users are working on the same system
COMPOSE_PROJECT_NAME=sn-stack-${USER}${UNIQUE:-}

# (Optional)
# Set this variable if you want to pull the xilinx-labtools-docker image from a remote registry rather than building locally
#LABTOOLS_IMAGE_URI=wharf.es.net/ht/xilinx-labtools-docker:53144-g319f2bac

# (Optional)
# Set this variable if you want to pull the esnet-smartnic-fw image from a remote registry rather than building locally
#SMARTNIC_FW_IMAGE_URI=wharf.es.net/ht/esnet-smartnic-fw:28728-ga8155293

# (Optional)
# Set this variable if you want to pull the smartnic-dpdk-docker image from a remote registry rather than building locally
#SMARTNIC_DPDK_IMAGE_URI=wharf.es.net/ht/smartnic-dpdk-docker:34635-g2745d783

# (Optional)
# Choose a specific JTAG cable (and thus a specific U280 card) to take control of
# If this is commented out, it will default to "*" which just chooses the first JTAG cable it finds
# which is exactly what you want if you only have a single JTAG cable in your system.
#
#   Discover the address using lsusb
#   $ sudo lsusb -v -d 0403:6011 | grep iSerial
#   iSerial                 3 21770205K01Y
#
# Note: An extra letter "A" must be appended to the serial number to get it to match in vivado labtools
#HW_TARGET_SERIAL=21770205K01YA

# (Required -- default is safe)
# Choose a specific TCP port for the traefik reverse proxy to listen on.  Default is 8440.
# This option should be used when running multiple stacks on a single host so that
# each stack's reverse proxy listens on a unique port, avoiding conflict.
SN_INGRESS_PORT=844${UNIQUE:-0}

# (Optional)
# Control logging of every request seen by the ingress.  Default is false.
# Valid values for this variable are only true/false.
#SN_INGRESS_ENABLE_ACCESS_LOG=true

# (Required)
# Used to select PCIe device that the application stack should bind against
#
#   Discover the addresses using lspci
#            $ lspci -Dd 10ee:
#            0000:d8:00.0 Memory controller: Xilinx Corporation Device 903f
#            0000:d8:00.1 Memory controller: Xilinx Corporation Device 913f
#            |  | || || |
#   Domain --++++ || || |
#   Bus ----------++ || |
#   Device ----------++ |
#   Function -----------+
#
# Note: The PCIe function (the ".0" or ".1") is left off of this variable
#FPGA_PCIE_DEV=0000:d8:00

# (Required)
# Used for the following:
# - To set the FQDN or bare hostname which will be used in transmitted LLDP messages.
#   This is only relevant when using COMPOSE_PROFILES=smartnic-mgr-dpdk-portlink
#   since the LLDP transmitter only runs in that mode.
# - Name of the Docker host system on which the SmartNIC Configuration server will run.
#   Used for retrieving Let's Encrypt TLS certificate and private key for setting up the
#   server's secure channel.
#SN_HOST=foo.example.org

# (Optional)
# Define the service context in this stack that will provide a pair of network tap interfaces
# that can be used to inject LLDP packets directly into the CMAC Tx path.  This setting is used
# by the smartnic-lldp service.
#SN_PF_NETDEV_SERVICE=smartnic-dpdk-portlink

# (Optional)
# Used to mount an alternative directory containing Robot Framework test suites
# and library for firmware testing.
#SN_FW_TEST_ROOT=/path/to/mount/onto/sn-stack/test/fw

# (Optional)
# Used to mount an alternative directory containing Robot Framework test suites
# and library for hardware testing.
#SN_HW_TEST_ROOT=/path/to/mount/onto/sn-stack/test/hw

# (Optional)
# Variables for tuning the location of TLS inputs.
# - SN_TLS_HOST_DIR:    Directory in the Docker host filesystem containing TLS certificates to be
#                       mounted into the container.
#                       Defaults to "<esnet-smartnic-fw>/sn-stack/letsencrypt".
# - SN_TLS_PATH_PREFIX: Prefix to apply to all TLS file names when building their path. When non-empty,
#                       the prefix MUST include a trailing forward slash (/).
# - SN_TLS_CERT:        Name of the TLS certifcate PEM file.
#                       Defaults to Let's Encrypt certificate file "cert.pem".
# - SN_TLS_CHAIN:       Name of the TLS certificate chain PEM file, excluding the certificate itself.
#                       Defaults to Let's Encrypt chain file "chain.pem".
# - SN_TLS_FULLCHAIN:   Name of the TLS certificate chain PEM file, including the certificate itself.
#                       Defaults to Let's Encrypt full chain file "fullchain.pem".
# - SN_TLS_KEY:         Name of the TLS private key PEM file.
#                       Defaults to Let's Encrypt private key file "privkey.pem".
#SN_TLS_HOST_DIR=/etc/letsencrypt
#SN_TLS_PATH_PREFIX=live/${SN_HOST}/
#SN_TLS_CERT=<name-of-certificate-pem-file>
#SN_TLS_CHAIN=<name-of-chain-pem-file>
#SN_TLS_FULLCHAIN=<name-of-full-chain-pem-file>
#SN_TLS_KEY=<name-of-private-key-pem-file>

# (Required)
# Token used for authenticating remote procedure calls with the SmartNIC Configuration server.
# Example: openssl rand -base64 24
#SN_CFG_AUTH_TOKEN=<some-token>

# (Required)
# Token used for authenticating remote procedure calls with the SmartNIC P4 server.
# Example: openssl rand -base64 24
#SN_P4_AUTH_TOKEN=<some-token>
