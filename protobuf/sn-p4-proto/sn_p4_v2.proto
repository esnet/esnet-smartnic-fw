//--------------------------------------------------------------------------------------------------
syntax = "proto3";

package sn_p4.v2;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

//--------------------------------------------------------------------------------------------------
enum ErrorCode {
    // General error codes.
    EC_UNKNOWN = 0; // Field is unset.
    EC_OK = 1;

    // Batch error codes.
    EC_UNKNOWN_BATCH_REQUEST = 100;
    EC_UNKNOWN_BATCH_OP = 101;

    // Device configuration error codes.
    EC_INVALID_DEVICE_ID = 200;

    // Pipeline configuration error codes.
    EC_INVALID_PIPELINE_ID = 300;

    // Table configuration error codes.
    EC_INVALID_TABLE_NAME = 400;
    EC_FAILED_CLEAR_ALL_TABLES = 401;
    EC_FAILED_CLEAR_TABLE = 402;
    EC_INVALID_ACTION_NAME = 403;
    EC_TABLE_RULE_TOO_FEW_MATCHES = 404;
    EC_TABLE_RULE_TOO_MANY_MATCHES = 405;
    EC_TABLE_RULE_TOO_FEW_ACTION_PARAMETERS = 406;
    EC_TABLE_RULE_TOO_MANY_ACTION_PARAMETERS = 407;
    EC_TABLE_RULE_INVALID_ACTION_PARAMETER_FORMAT = 408;
    EC_TABLE_RULE_MATCH_INVALID_KEY_FORMAT = 409;
    EC_TABLE_RULE_MATCH_INVALID_MASK_FORMAT = 410;
    EC_TABLE_RULE_MATCH_INVALID_PREFIX_LENGTH = 411;
    EC_TABLE_RULE_MATCH_RANGE_LOWER_TOO_BIG = 412;
    EC_TABLE_RULE_MATCH_RANGE_UPPER_TOO_BIG = 413;
    EC_UNKNOWN_TABLE_RULE_MATCH_TYPE = 414;
    EC_FAILED_INSERT_TABLE_RULE = 415;
    EC_FAILED_DELETE_TABLE_RULE = 416;

    EC_TABLE_RULE_FIELD_SPEC_OVERFLOW = 450;
    EC_TABLE_RULE_FIELD_SPEC_FORMAT_INVALID = 451;
    EC_TABLE_RULE_FIELD_SPEC_UNKNOWN_TYPE = 452;
    EC_TABLE_RULE_FIELD_SPEC_SIZE_MISMATCH = 453;
    EC_TABLE_RULE_PACK_KEY_TOO_BIG = 454;
    EC_TABLE_RULE_PACK_MASK_TOO_BIG = 455;
    EC_TABLE_RULE_PACK_PARAMS_TOO_BIG = 456;
    EC_TABLE_RULE_MATCH_INVALID_FORMAT = 457;
    EC_TABLE_RULE_MATCH_MASK_TOO_WIDE = 458;
    EC_TABLE_RULE_MATCH_INVALID_BITFIELD_MASK = 459;
    EC_TABLE_RULE_MATCH_INVALID_CONSTANT_MASK = 460;
    EC_TABLE_RULE_MATCH_INVALID_PREFIX_MASK = 461;
    EC_TABLE_RULE_MATCH_INVALID_RANGE_MASK = 462;
    EC_TABLE_RULE_MATCH_INVALID_UNUSED_MASK = 463;
    EC_TABLE_RULE_MATCH_KEY_TOO_BIG = 464;
    EC_TABLE_RULE_MATCH_MASK_TOO_BIG = 465;
    EC_TABLE_RULE_INVALID_TABLE_NAME = 466;
    EC_TABLE_RULE_INVALID_TABLE_CONFIG = 467;
    EC_TABLE_RULE_INVALID_ACTION_FOR_TABLE = 468;
    EC_TABLE_RULE_PARAM_INVALID_FORMAT = 469;
    EC_TABLE_RULE_PARAM_SPEC_OVERFLOW = 470;
    EC_TABLE_RULE_PARAM_SPEC_SIZE_MISMATCH = 471;
    EC_TABLE_RULE_PARAM_TOO_BIG = 472;

    // Server configuration error codes.
    EC_SERVER_FAILED_GET_TIME = 500;
    EC_SERVER_INVALID_DEBUG_FLAG = 501;
}

//--------------------------------------------------------------------------------------------------
enum StringRegexpGrammar {
    STR_REGEXP_GRAMMAR_UNKNOWN = 0; // Field is unset.
    STR_REGEXP_GRAMMAR_ECMA_SCRIPT = 1; // https://en.cppreference.com/w/cpp/regex/ecmascript
                                        // https://eel.is/c++draft/re.grammar
    STR_REGEXP_GRAMMAR_BASIC_POSIX = 2;
    STR_REGEXP_GRAMMAR_EXTENDED_POSIX = 3;
    STR_REGEXP_GRAMMAR_AWK = 4;
    STR_REGEXP_GRAMMAR_GREP = 5;
    STR_REGEXP_GRAMMAR_EGREP = 6;
}

message StringRegexp {
    StringRegexpGrammar grammar = 1; // When unset, defaults to ECMAScript.
    string pattern = 2;
}

//--------------------------------------------------------------------------------------------------
enum StatsMetricType {
    STATS_METRIC_TYPE_UNKNOWN = 0; // Field is unset.
    STATS_METRIC_TYPE_COUNTER = 1;
    STATS_METRIC_TYPE_GAUGE = 2;
    STATS_METRIC_TYPE_FLAG = 3;
}

message StatsMetricScope {
    string domain = 1;
    string zone = 2;
    string block = 3;
}

message StatsMetricLabel {
    string key = 1;
    string value = 2;
}

message StatsMetricValue {
    uint64 u64 = 1;
    double f64 = 2;
    uint32 index = 3; // Used to distinguish values for array metrics.
    repeated StatsMetricLabel labels = 4; // Populated when the "with_labels" flag in StatsFilters
                                          // is true. Empty otherwise.
}

message StatsMetric {
    StatsMetricType type = 1;
    StatsMetricScope scope = 2;
    string name = 3;
    uint32 num_elements = 4; // Indicates the metric is a singleton when 0, an array otherwise.
    repeated StatsMetricValue values = 5; // Will contain one value for singleton metrics and be a
                                          // list of values for array metrics.
    google.protobuf.Timestamp last_update = 6; // Monotonic timestamp indicating when the metric was
                                               // last updated.
}

message Stats {
    repeated StatsMetric metrics = 1;
}

message StatsMetricMatchString {
    message Split {
        message Part {
            message Match {
                oneof attribute { // Acts as a wildcard when unset.
                    StatsMetricMatchString value = 1; // Singular string match to apply.
                    uint32 index = 2; // Used to match against a single part of the split (used for
                                      // cases where the order of the parts is significant). Use as
                                      // one term in an "all_set" of matches to restrict the other
                                      // matches to only the chosen part.
                }
            }

            // Covenience structure used solely to work around the inability to include "repeated"
            // fields within a "oneof". Defined this way to leverage self-referential nesting.
            message Set {
                repeated StatsMetricMatchString.Split.Part members = 1;
            }

            bool negated = 1; // Logical negation of the final result after computing the term.
            oneof term { // Acts as a wildcard when unset.
                StatsMetricMatchString.Split.Part.Match match = 10; // Singular match to apply.
                StatsMetricMatchString.Split.Part.Set any_set = 11; // Logical OR of matches.
                StatsMetricMatchString.Split.Part.Set all_set = 12; // Logical AND of matches.
            }
        }

        string pattern = 1; // Regular expression pattern to use for splitting the string into parts
                            // prior to computing the term. The pattern grammar is ECMAScript (as
                            // per https://eel.is/c++draft/re.grammar).

        bool any = 2; // true: Split is true when ANY of the parts match (logical OR over parts).
                      // false: Split is true when ALL of the parts match (logical AND over parts).

        StatsMetricMatchString.Split.Part part = 3; // Specifies how to match each part after
                                                    // splitting on the pattern.
    }

    oneof method { // Acts as a wildcard when unset.
        string exact = 1; // Match only the entire string.
        string prefix = 2; // Match from the start of the string.
        string suffix = 3; // Match from the end of the string.
        string substring = 4; // Match anywhere within the string.
        StringRegexp regexp = 5; // Match by regular expression.
        StatsMetricMatchString.Split split = 6; // Split the string and match each part.
    }
}

message StatsMetricMatchIndexSlice {
    sint32 start = 1; // Index of the first value included in the slice. Use a negative value to
                      // indicate the index is relative to the end of the range. Must be <= to the
                      // end index.
    sint32 end = 2; // Index of the last value included in the slice. Use a negative value to
                    // indicate the index is relative to the end of the range. Must be >= to the
                    // start index.
    uint32 step = 3; // Increment applied from the start index until, and not exceeding, the end.
                     // The step size must be a positive integer. A value of 0 is interpreted as 1.
                     // Since the intent is for filtering rather than sorting, using a negative step
                     // to reverse the sequence is not supported.
}

message StatsMetricMatchIndices {
    // Restricts which indices of an array metric are to be included. If the union of all slices is
    // empty, the metric is not matched. All singleton (non-array) metrics will not be matched.
    // Leave the list empty to match only singleton (non-array) metrics.
    repeated StatsMetricMatchIndexSlice slices = 1;
}

message StatsMetricMatchLabel {
    // The result of the key and value matches are logically ANDed.
    StatsMetricMatchString key = 1; // Leave unset to wildard.
    StatsMetricMatchString value = 2; // Leave unset to wildcard.
}

message StatsMetricMatch {
    oneof attribute { // Acts as a wildcard when unset.
        StatsMetricType type = 1; // Restrict to metrics of this type.
        StatsMetricMatchString domain = 2; // Restrict the domain containing a metric.
        StatsMetricMatchString zone = 3; // Restrict the zone containing a metric.
        StatsMetricMatchString block = 4; // Restrict of the block containing a metric.
        StatsMetricMatchString name = 5; // Restrict the name of the metric.
        StatsMetricMatchIndices indices = 6; // Restrict the range of indices deemed valid.
        StatsMetricMatchLabel label = 7; // Restrict which labels are possessed by a metric.
    }
}

message StatsMetricFilter {
    // Covenience structure used solely to work around the inability to include "repeated" fields
    // within a "oneof". Defined this way to leverage self-referential nesting.
    message Set {
        repeated StatsMetricFilter members = 1;
    }

    bool negated = 1; // Logical negation of the final result after computing the term.
    oneof term { // Acts as a wildcard when unset.
        StatsMetricMatch match = 10; // Match a singular metric attribute.
        StatsMetricFilter.Set any_set = 11; // Logical OR of filters.
        StatsMetricFilter.Set all_set = 12; // Logical AND of filters.
    }
}

message StatsFilters {
    // This field is no longer supported and will be ignored. Use the metric_filter field instead.
    repeated StatsMetricType metric_types = 1 [deprecated = true];

    bool non_zero = 2; // Restrict metrics to those whose value is not zero. This check is applied
                       // before any other filters.

    StatsMetricFilter metric_filter = 3; // Logical expression used to restrict metrics by matching
                                         // on various attributes. Leave unset to match all.

    bool with_labels = 4; // Include the labels associated with each metric value.
}

message StatsRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
    StatsFilters filters = 2; // Filters to restrict statistics on get operations.
                              // Leave unset for all statistics.
}

message StatsResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
    Stats stats = 3;
}

//--------------------------------------------------------------------------------------------------
message DevicePciInfo {
    string bus_id = 1;
    uint32 vendor_id = 2; // Only low 16-bits are valid (uint16 not supported by protobuf).
    uint32 device_id = 3; // Only low 16-bits are valid (uint16 not supported by protobuf).
}

message DeviceBuildEnvironment {
    string hw_version = 1;
    string fw_version = 2;
    string sw_version = 3;
}

message DeviceBuildInfo {
    uint32 number = 1; // Value from syscfg.usr_access.
    uint32 status = 2; // Value from syscfg.build_status.
    repeated uint32 dna = 3; // Array of length 3, value from syscfg.dna[3] (same ordering).
    DeviceBuildEnvironment env = 4; // Environment variables used during the build.
}

message DeviceInfo {
    DevicePciInfo pci = 1;
    DeviceBuildInfo build = 2;
}

message DeviceInfoRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
}

message DeviceInfoResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
    DeviceInfo info = 3;
}

//--------------------------------------------------------------------------------------------------
enum MatchType {
    MATCH_TYPE_UNKNOWN = 0; // Field is unset.
    MATCH_TYPE_BITFIELD = 1;
    MATCH_TYPE_CONSTANT = 2;
    MATCH_TYPE_PREFIX = 3;
    MATCH_TYPE_RANGE = 4;
    MATCH_TYPE_TERNARY = 5;
    MATCH_TYPE_UNUSED = 6;
}

message MatchInfo {
    MatchType type = 1;
    uint32 width = 2;
}

message ActionParameterInfo {
    string name = 1;
    uint32 width = 2;
}

message ActionInfo {
    string name = 1;
    uint32 width = 2;
    repeated ActionParameterInfo parameters = 3;
}

enum TableEndian {
    TABLE_ENDIAN_UNKNOWN = 0; // Field is unset.
    TABLE_ENDIAN_LITTLE = 1;
    TABLE_ENDIAN_BIG = 2;
}

enum TableMode {
    TABLE_MODE_UNKNOWN = 0; // Field is unset.
    TABLE_MODE_BCAM = 1;
    TABLE_MODE_STCAM = 2;
    TABLE_MODE_TCAM = 3;
    TABLE_MODE_DCAM = 4;
    TABLE_MODE_TINY_BCAM = 5;
    TABLE_MODE_TINY_TCAM = 6;
}

message TableInfo {
    string name = 1;
    uint32 num_entries = 2;
    TableEndian endian = 3;
    TableMode mode = 4;
    uint32 num_masks = 5; // Only valid when mode is TABLE_MODE_STCAM.
    bool priority_required = 6;

    uint32 key_width = 10;
    uint32 response_width = 11;
    uint32 priority_width = 12; // Special case: 255 (0xff) means width is automatically computed.
    uint32 action_id_width = 13;

    repeated MatchInfo matches = 20;
    repeated ActionInfo actions = 21;
}

enum CounterType {
    COUNTER_TYPE_UNKNOWN = 0;
    COUNTER_TYPE_PACKETS = 1;
    COUNTER_TYPE_BYTES = 2;
    COUNTER_TYPE_PACKETS_AND_BYTES = 3;
    COUNTER_TYPE_FLAG = 4;
}

message CounterBlockInfo {
    string name = 1;
    CounterType type = 2;
    uint32 width = 3;
    uint32 num_counters = 4;
}

message PipelineInfo {
    string name = 1;
    repeated TableInfo tables = 2;
    repeated CounterBlockInfo counter_blocks = 3;
}

message PipelineInfoRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
    sint32 pipeline_id = 2; // 0-based index. Set to -1 for all pipelines.
}

message PipelineInfoResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
    uint32 pipeline_id = 3;
    PipelineInfo info = 4;
}

message PipelineStatsRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
    sint32 pipeline_id = 2; // 0-based index. Set to -1 for all pipelines.
    StatsFilters filters = 3; // Filters to restrict statistics on get operations.
                              // Leave unset for all counter statistics.
}

message PipelineStatsResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
    uint32 pipeline_id = 3;
    Stats stats = 4;
}

//--------------------------------------------------------------------------------------------------
message TableRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
    sint32 pipeline_id = 2; // 0-based index. Set to -1 for all pipelines.
    string table_name = 3; // Table to operate on. Leave empty for all tables.
}

message TableResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
    uint32 pipeline_id = 3;
}

message MatchKeyMask {
    string key = 1;
    string mask = 2;
}

message MatchKeyOnly {
    string key = 1;
}

message MatchKeyPrefix {
    string key = 1;
    uint32 prefix_length = 2;
}

message MatchRange {
    uint32 lower = 1;
    uint32 upper = 2;
}

message Match {
    oneof type {
        MatchKeyMask key_mask = 1;
        MatchKeyOnly key_only = 2;
        MatchKeyPrefix key_prefix = 3;
        MatchRange range = 4;
        bool unused = 5;
    }
}

message ActionParameter {
    string value = 1;
}

message Action {
    string name = 1;
    repeated ActionParameter parameters = 2;
}

message TableRule {
    string table_name = 1;
    uint32 priority = 2; // Only used for insert operation.
    bool replace = 3; // Only used for insert operation.
    repeated Match matches = 4;
    Action action = 5; // Leave unset for delete operation.
}

message TableRuleRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
    sint32 pipeline_id = 2; // 0-based index. Set to -1 for all pipelines.
    repeated TableRule rules = 3;
}

message TableRuleResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
    uint32 pipeline_id = 3;
}

//--------------------------------------------------------------------------------------------------
message ServerStatus {
    google.protobuf.Timestamp start_time = 1; // UTC wall clock.
    google.protobuf.Duration up_time = 2; // Diff of monotonic system clock.
}

message ServerStatusRequest {
}

message ServerStatusResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    ServerStatus status = 2;
}

enum ServerDebugFlag {
    DEBUG_FLAG_UNKNOWN = 0;
    DEBUG_FLAG_TABLE_CLEAR = 1;
    DEBUG_FLAG_TABLE_RULE_INSERT = 2;
    DEBUG_FLAG_TABLE_RULE_DELETE = 3;
    DEBUG_FLAG_PIPELINE_INFO = 10;
    DEBUG_FLAG_PIPELINE_DRIVER = 11;
    DEBUG_FLAG_STATS = 20;
}

message ServerDebug {
    repeated ServerDebugFlag enables = 1;
    repeated ServerDebugFlag disables = 2;
}

message ServerConfig {
    ServerDebug debug = 1;
}

message ServerConfigRequest {
    // Configuration data used for set operations. Leave unset for get operations.
    ServerConfig config = 1;
}

message ServerConfigResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.

    // Configuration data returned on get operations. Will be unset for set operations.
    ServerConfig config = 2;
}

//--------------------------------------------------------------------------------------------------
enum BatchOperation {
    BOP_UNKNOWN = 0; // Field is unset.
    BOP_GET = 1;
    BOP_SET = 2;
    BOP_CLEAR = 3;
    BOP_INSERT = 4;
    BOP_DELETE = 5;
}

message BatchRequest {
    BatchOperation op = 1;

    // Field IDs 2-9 are reserved for future use.

    oneof item {
        // Device configuration.
        DeviceInfoRequest device_info = 10;

        // Pipeline configuration.
        PipelineInfoRequest pipeline_info = 20;
        PipelineStatsRequest pipeline_stats = 21;

        // Table configuration.
        TableRequest table = 30;
        TableRuleRequest table_rule = 31;

        // Statistics configuration.
        StatsRequest stats = 40;

        // Server configuration.
        ServerStatusRequest server_status = 50;
        ServerConfigRequest server_config = 51;
    };
}

message BatchResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    BatchOperation op = 2;

    // Field IDs 2-9 are reserved for future use.

    oneof item {
        // Device configuration.
        DeviceInfoResponse device_info = 10;

        // Pipeline configuration.
        PipelineInfoResponse pipeline_info = 20;
        PipelineStatsResponse pipeline_stats = 21;

        // Table configuration.
        TableResponse table = 30;
        TableRuleResponse table_rule = 31;

        // Statistics configuration.
        StatsResponse stats = 40;

        // Server configuration.
        ServerStatusResponse server_status = 50;
        ServerConfigResponse server_config = 51;
    };
}

//--------------------------------------------------------------------------------------------------
service SmartnicP4 {
    // Batching of multiple RPCs.
    rpc Batch(stream BatchRequest) returns (stream BatchResponse);

    // Device configuration.
    rpc GetDeviceInfo(DeviceInfoRequest) returns (stream DeviceInfoResponse);

    // Pipeline configuration.
    rpc GetPipelineInfo(PipelineInfoRequest) returns (stream PipelineInfoResponse);
    rpc GetPipelineStats(PipelineStatsRequest) returns (stream PipelineStatsResponse);
    rpc ClearPipelineStats(PipelineStatsRequest) returns (stream PipelineStatsResponse);

    // Table configuration.
    rpc ClearTable(TableRequest) returns (stream TableResponse);
    rpc InsertTableRule(TableRuleRequest) returns (stream TableRuleResponse);
    rpc DeleteTableRule(TableRuleRequest) returns (stream TableRuleResponse);

    // Statistics configuration.
    rpc GetStats(StatsRequest) returns (stream StatsResponse);
    rpc ClearStats(StatsRequest) returns (stream StatsResponse);

    // Server configuration.
    rpc GetServerConfig(ServerConfigRequest) returns (stream ServerConfigResponse);
    rpc SetServerConfig(ServerConfigRequest) returns (stream ServerConfigResponse);
    rpc GetServerStatus(ServerStatusRequest) returns (stream ServerStatusResponse);
}
