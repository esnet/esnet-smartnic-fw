//--------------------------------------------------------------------------------------------------
syntax = "proto3";

//--------------------------------------------------------------------------------------------------
enum ErrorCode {
    // General error codes.
    EC_UNKNOWN = 0; // Field is unset.
    EC_OK = 1;

    // Batch error codes.
    EC_UNKNOWN_BATCH_REQUEST = 100;
    EC_UNKNOWN_BATCH_OP = 101;

    // Device configuration error codes.
    EC_INVALID_DEVICE_ID = 200;

    // Host configuration error codes.
    EC_INVALID_HOST_ID = 300;
    EC_MISSING_HOST_CONFIG = 301;
    EC_MISSING_HOST_DMA_CONFIG = 302;
    EC_UNSUPPORTED_HOST_ID = 303;
    EC_FAILED_GET_DMA_QUEUES = 304;
    EC_FAILED_SET_DMA_QUEUES = 305;

    // Port configuration error codes.
    EC_INVALID_PORT_ID = 400;
    EC_MISSING_PORT_CONFIG = 401;
    EC_UNSUPPORTED_PORT_ID = 402;
    EC_UNSUPPORTED_PORT_STATE = 403;
    EC_UNSUPPORTED_PORT_FEC = 404;
    EC_UNSUPPORTED_PORT_LOOPBACK = 405;

    // Switch configuration error codes.
    EC_MISSING_SWITCH_CONFIG = 500;
    EC_MISSING_IGR_SRC_FROM_INTF = 501;
    EC_MISSING_IGR_SRC_TO_INTF = 502;
    EC_UNSUPPORTED_IGR_SRC_FROM_INTF = 503;
    EC_UNSUPPORTED_IGR_SRC_TO_INTF = 504;
    EC_FAILED_GET_IGR_SRC = 505;
    EC_FAILED_SET_IGR_SRC = 506;
    EC_MISSING_IGR_CONN_FROM_INTF = 507;
    EC_MISSING_IGR_CONN_TO_PROC = 508;
    EC_UNSUPPORTED_IGR_CONN_FROM_INTF = 509;
    EC_UNSUPPORTED_IGR_CONN_TO_PROC = 510;
    EC_FAILED_GET_IGR_CONN = 511;
    EC_FAILED_SET_IGR_CONN = 512;
    EC_MISSING_EGR_CONN_ON_PROC = 513;
    EC_MISSING_EGR_CONN_FROM_INTF = 514;
    EC_MISSING_EGR_CONN_TO_INTF = 515;
    EC_UNSUPPORTED_EGR_CONN_ON_PROC = 516;
    EC_UNSUPPORTED_EGR_CONN_FROM_INTF = 517;
    EC_UNSUPPORTED_EGR_CONN_TO_INTF = 518;
    EC_FAILED_GET_EGR_CONN = 519;
    EC_FAILED_SET_EGR_CONN = 520;

    // Defaults configuration error codes.
    EC_UNKNOWN_DEFAULTS_PROFILE = 600;
}

//--------------------------------------------------------------------------------------------------
message StatsCounter {
    string domain = 1;
    string zone = 2;
    string block = 3;
    string name = 4;
    uint64 value = 5;
}

enum StatsMetricType {
    STATS_METRIC_TYPE_UNKNOWN = 0; // Field is unset.
    STATS_METRIC_TYPE_COUNTER = 1;
    STATS_METRIC_TYPE_GAUGE = 2;
    STATS_METRIC_TYPE_FLAG = 3;
}

message StatsMetricScope {
    string domain = 1;
    string zone = 2;
    string block = 3;
}

message StatsMetricValue {
    uint64 u64 = 1;
    double f64 = 2;
}

message StatsMetric {
    StatsMetricType type = 1;
    StatsMetricScope scope = 2;
    string name = 3;
    StatsMetricValue value = 4;
}

message Stats {
    // This field is no longer populated. Use the metrics field instead.
    repeated StatsCounter counters = 1 [deprecated = true];

    repeated StatsMetric metrics = 2;
}

message StatsFilters {
    repeated StatsMetricType metric_types = 1; // Restrict metrics to the given type(s).
                                               // Leave unset for all types.
    bool non_zero = 2; // Restrict metrics to those whose value is not zero.
}

message StatsRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
    StatsFilters filters = 2; // Filters to restrict statistics on get operations.
                              // Leave unset for all statistics.
}

message StatsResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
    Stats stats = 3;
}

//--------------------------------------------------------------------------------------------------
enum DefaultsProfile {
    DS_UNKNOWN = 0;
    DS_ONE_TO_ONE = 1;
}

message DefaultsRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
    DefaultsProfile profile = 2;
}

message DefaultsResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
}

//--------------------------------------------------------------------------------------------------
message DevicePciInfo {
    string bus_id = 1;
    uint32 vendor_id = 2; // Only low 16-bits are valid (uint16 not supported by protobuf).
    uint32 device_id = 3; // Only low 16-bits are valid (uint16 not supported by protobuf).
}

message DeviceBuildInfo {
    uint32 number = 1; // Value from syscfg.usr_access.
    uint32 status = 2; // Value from syscfg.build_status.
    repeated uint32 dna = 3; // Array of length 3, value from syscfg.dna[3] (same ordering).
}

message DeviceInfo {
    DevicePciInfo pci = 1;
    DeviceBuildInfo build = 2;
}

message DeviceInfoRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
}

message DeviceInfoResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
    DeviceInfo info = 3;
}

message DeviceSystemMonitor {
    uint32 index = 1; // System monitor index.
    float temperature = 2; // Value from sysmon0.temperature.
}

message DeviceStatusAlarm {
    string source = 1;
    string name = 2;
    bool active = 3;
}

message DeviceStatusMonitor {
    string source = 1;
    string name = 2;
    double value = 3;
}

message DeviceStatus {
    // This field is no longer populated. Use the monitors field with:
    // - source == "sysmon<index>" ("sysmon0", "sysmon1", ...)
    // - name == "temp"
    repeated DeviceSystemMonitor sysmons = 1 [deprecated = true];

    repeated DeviceStatusMonitor monitors = 2;
    repeated DeviceStatusAlarm alarms = 3;
}

message DeviceStatusRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
}

message DeviceStatusResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
    DeviceStatus status = 3;
}

//--------------------------------------------------------------------------------------------------
message HostDmaConfig {
    uint32 base_queue = 1;
    uint32 num_queues = 2;
}

message HostConfig {
    HostDmaConfig dma = 1;
}

message HostConfigRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
    sint32 host_id = 2; // 0-based index. Set to -1 for all host interfaces.

    // Configuration data used for set operations. Leave unset for get operations.
    HostConfig config = 3;
}

message HostConfigResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
    uint32 host_id = 3;

    // Configuration data returned on get operations. Will be unset for set operations.
    HostConfig config = 4;
}

message HostStatsRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
    sint32 host_id = 2; // 0-based index. Set to -1 for all host interfaces.
    StatsFilters filters = 3; // Filters to restrict statistics on get operations.
                              // Leave unset for all counter statistics.
}

message HostStatsResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
    uint32 host_id = 3;
    Stats stats = 4;
}

//--------------------------------------------------------------------------------------------------
enum PortState {
    PORT_STATE_UNKNOWN = 0; // Field is unset.
    PORT_STATE_DISABLE = 1;
    PORT_STATE_ENABLE = 2;
}

enum PortFec {
    PORT_FEC_UNKNOWN = 0; // Field is unset.
    PORT_FEC_NONE = 1;
    PORT_FEC_REED_SOLOMON = 2;
}

enum PortLoopback {
    PORT_LOOPBACK_UNKNOWN = 0; // Field is unset.
    PORT_LOOPBACK_NONE = 1;
    PORT_LOOPBACK_NEAR_END_PMA = 2;
}

message PortConfig {
    PortState state = 1;
    PortFec fec = 2;
    PortLoopback loopback = 3;
}

message PortConfigRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
    sint32 port_id = 2; // 0-based index. Set to -1 for all ports.

    // Configuration data used for set operations. Leave unset for get operations.
    PortConfig config = 3;
}

message PortConfigResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
    uint32 port_id = 3;

    // Configuration data returned on get operations. Will be unset for set operations.
    PortConfig config = 4;
}

enum PortLink {
    PORT_LINK_UNKNOWN = 0; // Field is unset.
    PORT_LINK_DOWN = 1;
    PORT_LINK_UP = 2;
}

message PortStatus {
    PortLink link = 1;
}

message PortStatusRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
    sint32 port_id = 2; // 0-based index. Set to -1 for all ports.
}

message PortStatusResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
    uint32 port_id = 3;
    PortStatus status = 4;
}

message PortStatsRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
    sint32 port_id = 2; // 0-based index. Set to -1 for all ports.
    StatsFilters filters = 3; // Filters to restrict statistics on get operations.
                              // Leave unset for all counter statistics.
}

message PortStatsResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
    uint32 port_id = 3;
    Stats stats = 4;
}

//--------------------------------------------------------------------------------------------------
enum SwitchInterfaceType {
    SW_INTF_UNKNOWN = 0; // Field is unset.
    SW_INTF_PORT = 1;
    SW_INTF_HOST = 2;
}

message SwitchInterfaceId {
    SwitchInterfaceType itype = 1;
    uint32 index = 2;
}

// TODO: Should Processor be Pipeline instead? For consistency with the sn-p4 protobuf?
enum SwitchProcessorType {
    SW_PROC_UNKNOWN = 0; // Field is unset.
    SW_PROC_BYPASS = 1;
    SW_PROC_DROP = 2;
    SW_PROC_APP = 3;
}

message SwitchProcessorId {
    SwitchProcessorType ptype = 1;
    uint32 index = 2;
}

message SwitchIngressSource {
    SwitchInterfaceId from_intf = 1;
    SwitchInterfaceId to_intf = 2;
}

message SwitchIngressConnection {
    SwitchInterfaceId from_intf = 1;
    SwitchProcessorId to_proc = 2;
}

message SwitchEgressConnection {
    SwitchProcessorId on_proc = 1;
    SwitchInterfaceId from_intf = 2;
    SwitchInterfaceId to_intf = 3;
}

message SwitchConfig {
    // Array containing one source mapping per ingress interface.
    repeated SwitchIngressSource ingress_sources = 1;

    // Array containing one connection mapping per ingress interface.
    repeated SwitchIngressConnection ingress_connections = 2;

    // Array containing one connection mapping per egress interface on each processor.
    repeated SwitchEgressConnection egress_connections = 3;
}

message SwitchConfigRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.

    // Configuration data used for set operations. Leave unset for get operations.
    SwitchConfig config = 2;
}

message SwitchConfigResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;

    // Configuration data returned on get operations. Will be unset for set operations.
    SwitchConfig config = 3;
}

message SwitchStatsRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
    StatsFilters filters = 2; // Filters to restrict statistics on get operations.
                              // Leave unset for all counter statistics.
}

message SwitchStatsResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
    Stats stats = 3;
}

//--------------------------------------------------------------------------------------------------
enum BatchOperation {
    BOP_UNKNOWN = 0; // Field is unset.
    BOP_GET = 1;
    BOP_SET = 2;
    BOP_CLEAR = 3;
}

message BatchRequest {
    BatchOperation op = 1;

    // Field IDs 2-9 are reserved for future use.

    oneof item {
        // General device configuration.
        DeviceInfoRequest device_info = 10;
        DeviceStatusRequest device_status = 11;

        // Host configuration.
        HostConfigRequest host_config = 20;
        HostStatsRequest host_stats = 21;

        // Port configuration.
        PortConfigRequest port_config = 30;
        PortStatusRequest port_status = 31;
        PortStatsRequest port_stats = 32;

        // Switch configuration.
        SwitchConfigRequest switch_config = 40;
        SwitchStatsRequest switch_stats = 41;

        // Preset defaults configuration.
        DefaultsRequest defaults = 50;

        // Statistics configuration.
        StatsRequest stats = 60;
    };
}

message BatchResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.

    // Field IDs 2-9 are reserved for future use.

    oneof item {
        // General device configuration.
        DeviceInfoResponse device_info = 10;
        DeviceStatusResponse device_status = 11;

        // Host configuration.
        HostConfigResponse host_config = 20;
        HostStatsResponse host_stats = 21;

        // Port configuration.
        PortConfigResponse port_config = 30;
        PortStatusResponse port_status = 31;
        PortStatsResponse port_stats = 32;

        // Switch configuration.
        SwitchConfigResponse switch_config = 40;
        SwitchStatsResponse switch_stats = 41;

        // Preset defaults configuration.
        DefaultsResponse defaults = 50;

        // Statistics configuration.
        StatsResponse stats = 60;
    };
}

//--------------------------------------------------------------------------------------------------
service SmartnicConfig {
    // Batching of multiple RPCs.
    rpc Batch(stream BatchRequest) returns (stream BatchResponse);

    // Preset defaults configuration.
    rpc SetDefaults(DefaultsRequest) returns (stream DefaultsResponse);

    // General device configuration.
    rpc GetDeviceInfo(DeviceInfoRequest) returns (stream DeviceInfoResponse);
    rpc GetDeviceStatus(DeviceStatusRequest) returns (stream DeviceStatusResponse);

    // Host configuration.
    rpc GetHostConfig(HostConfigRequest) returns (stream HostConfigResponse);
    rpc SetHostConfig(HostConfigRequest) returns (stream HostConfigResponse);
    rpc GetHostStats(HostStatsRequest) returns (stream HostStatsResponse);
    rpc ClearHostStats(HostStatsRequest) returns (stream HostStatsResponse);

    // Port configuration.
    rpc GetPortConfig(PortConfigRequest) returns (stream PortConfigResponse);
    rpc SetPortConfig(PortConfigRequest) returns (stream PortConfigResponse);
    rpc GetPortStatus(PortStatusRequest) returns (stream PortStatusResponse);
    rpc GetPortStats(PortStatsRequest) returns (stream PortStatsResponse);
    rpc ClearPortStats(PortStatsRequest) returns (stream PortStatsResponse);

    // Statistics configuration.
    rpc GetStats(StatsRequest) returns (stream StatsResponse);
    rpc ClearStats(StatsRequest) returns (stream StatsResponse);

    // Switch configuration.
    rpc GetSwitchConfig(SwitchConfigRequest) returns (stream SwitchConfigResponse);
    rpc SetSwitchConfig(SwitchConfigRequest) returns (stream SwitchConfigResponse);
    rpc GetSwitchStats(SwitchStatsRequest) returns (stream SwitchStatsResponse);
    rpc ClearSwitchStats(SwitchStatsRequest) returns (stream SwitchStatsResponse);
}
