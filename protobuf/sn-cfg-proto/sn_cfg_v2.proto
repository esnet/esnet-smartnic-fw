//--------------------------------------------------------------------------------------------------
syntax = "proto3";

package sn_cfg.v2;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

//--------------------------------------------------------------------------------------------------
enum ErrorCode {
    // General error codes.
    EC_UNKNOWN = 0; // Field is unset.
    EC_OK = 1;

    // Batch error codes.
    EC_UNKNOWN_BATCH_REQUEST = 100;
    EC_UNKNOWN_BATCH_OP = 101;

    // Device configuration error codes.
    EC_INVALID_DEVICE_ID = 200;
    EC_CARD_INFO_READ_FAILED = 201;

    // Host configuration error codes.
    EC_INVALID_HOST_ID = 300;
    EC_MISSING_HOST_CONFIG = 301;
    EC_UNSUPPORTED_HOST_ID = 302;
    EC_UNSUPPORTED_HOST_FUNCTION = 303;
    EC_FAILED_GET_HOST_FUNCTION_DMA_QUEUES = 304;
    EC_FAILED_SET_HOST_FUNCTION_DMA_QUEUES = 305;
    EC_FAILED_GET_HOST_FC_EGR_THRESHOLD = 306;
    EC_FAILED_SET_HOST_FC_EGR_THRESHOLD = 307;

    // Port configuration error codes.
    EC_INVALID_PORT_ID = 400;
    EC_MISSING_PORT_CONFIG = 401;
    EC_UNSUPPORTED_PORT_ID = 402;
    EC_UNSUPPORTED_PORT_STATE = 403;
    EC_UNSUPPORTED_PORT_FEC = 404;
    EC_UNSUPPORTED_PORT_LOOPBACK = 405;
    EC_FAILED_GET_PORT_FC_EGR_THRESHOLD = 406;
    EC_FAILED_SET_PORT_FC_EGR_THRESHOLD = 407;

    // Switch configuration error codes.
    EC_MISSING_SWITCH_CONFIG = 500;
    EC_UNSUPPORTED_IGR_SEL_INTF = 501;
    EC_UNSUPPORTED_IGR_SEL_DEST = 502;
    EC_FAILED_GET_IGR_SEL = 503;
    EC_FAILED_SET_IGR_SEL = 504;
    EC_UNSUPPORTED_EGR_SEL_INTF = 505;
    EC_FAILED_GET_EGR_SEL = 506;
    EC_FAILED_SET_EGR_SEL = 507;
    EC_UNSUPPORTED_BYPASS_MODE = 508;
    EC_FAILED_GET_BYPASS_MODE = 509;
    EC_FAILED_SET_BYPASS_MODE = 510;

    // Defaults configuration error codes.
    EC_UNKNOWN_DEFAULTS_PROFILE = 600;

    // Module configuration error codes.
    EC_INVALID_MODULE_ID = 700;
    EC_MODULE_PAGE_READ_FAILED = 701;
    EC_INVALID_MODULE_MEM_OFFSET = 702;
    EC_INVALID_MODULE_MEM_PAGE = 703;
    EC_INVALID_MODULE_MEM_COUNT = 704;
    EC_MODULE_MEM_READ_FAILED = 705;
    EC_MODULE_MEM_WRITE_FAILED = 706;
    EC_UNKNOWN_MODULE_GPIO_TYPE = 707;
    EC_MODULE_GPIO_READ_FAILED = 708;
    EC_MODULE_GPIO_WRITE_FAILED = 709;
    EC_MODULE_NOT_PRESENT = 710;

    // Server configuration error codes.
    EC_SERVER_FAILED_GET_TIME = 800;
    EC_SERVER_INVALID_DEBUG_FLAG = 801;
    EC_SERVER_INVALID_CONTROL_STATS_FLAG = 802;
}

//--------------------------------------------------------------------------------------------------
enum StringRegexpGrammar {
    STR_REGEXP_GRAMMAR_UNKNOWN = 0; // Field is unset.
    STR_REGEXP_GRAMMAR_ECMA_SCRIPT = 1; // https://en.cppreference.com/w/cpp/regex/ecmascript
                                        // https://eel.is/c++draft/re.grammar
    STR_REGEXP_GRAMMAR_BASIC_POSIX = 2;
    STR_REGEXP_GRAMMAR_EXTENDED_POSIX = 3;
    STR_REGEXP_GRAMMAR_AWK = 4;
    STR_REGEXP_GRAMMAR_GREP = 5;
    STR_REGEXP_GRAMMAR_EGREP = 6;
}

message StringRegexp {
    StringRegexpGrammar grammar = 1; // When unset, defaults to ECMAScript.
    string pattern = 2;
}

//--------------------------------------------------------------------------------------------------
enum StatsMetricType {
    STATS_METRIC_TYPE_UNKNOWN = 0; // Field is unset.
    STATS_METRIC_TYPE_COUNTER = 1;
    STATS_METRIC_TYPE_GAUGE = 2;
    STATS_METRIC_TYPE_FLAG = 3;
}

message StatsMetricScope {
    string domain = 1;
    string zone = 2;
    string block = 3;
}

message StatsMetricLabel {
    string key = 1;
    string value = 2;
}

message StatsMetricValue {
    uint64 u64 = 1;
    double f64 = 2;
    uint32 index = 3; // Used to distinguish values for array metrics.
    repeated StatsMetricLabel labels = 4; // Populated when the "with_labels" flag in StatsFilters
                                          // is true. Empty otherwise.
}

message StatsMetric {
    StatsMetricType type = 1;
    StatsMetricScope scope = 2;
    string name = 3;

    // This field is no longer populated. Use the values field instead.
    StatsMetricValue value = 4 [deprecated = true];

    google.protobuf.Timestamp last_update = 5; // Monotonic timestamp indicating when the metric was
                                               // last updated.

    uint32 num_elements = 6; // Indicates the metric is a singleton when 0, an array otherwise.
    repeated StatsMetricValue values = 7; // Will contain one value for singleton metrics and be a
                                          // list of values for array metrics.
}

message Stats {
    // Reserve deprecated field numbers and names.
    reserved 1;
    reserved "counters";

    repeated StatsMetric metrics = 2;
}

message StatsMetricMatchString {
    message Split {
        message Part {
            message Match {
                oneof attribute { // Acts as a wildcard when unset.
                    StatsMetricMatchString value = 1; // Singular string match to apply.
                    uint32 index = 2; // Used to match against a single part of the split (used for
                                      // cases where the order of the parts is significant). Use as
                                      // one term in an "all_set" of matches to restrict the other
                                      // matches to only the chosen part.
                }
            }

            // Covenience structure used solely to work around the inability to include "repeated"
            // fields within a "oneof". Defined this way to leverage self-referential nesting.
            message Set {
                repeated StatsMetricMatchString.Split.Part members = 1;
            }

            bool negated = 1; // Logical negation of the final result after computing the term.
            oneof term { // Acts as a wildcard when unset.
                StatsMetricMatchString.Split.Part.Match match = 10; // Singular match to apply.
                StatsMetricMatchString.Split.Part.Set any_set = 11; // Logical OR of matches.
                StatsMetricMatchString.Split.Part.Set all_set = 12; // Logical AND of matches.
            }
        }

        string pattern = 1; // Regular expression pattern to use for splitting the string into parts
                            // prior to computing the term. The pattern grammar is ECMAScript (as
                            // per https://eel.is/c++draft/re.grammar).

        bool any = 2; // true: Split is true when ANY of the parts match (logical OR over parts).
                      // false: Split is true when ALL of the parts match (logical AND over parts).

        StatsMetricMatchString.Split.Part part = 3; // Specifies how to match each part after
                                                    // splitting on the pattern.
    }

    oneof method { // Acts as a wildcard when unset.
        string exact = 1; // Match only the entire string.
        string prefix = 2; // Match from the start of the string.
        string suffix = 3; // Match from the end of the string.
        string substring = 4; // Match anywhere within the string.
        StringRegexp regexp = 5; // Match by regular expression.
        StatsMetricMatchString.Split split = 6; // Split the string and match each part.
    }
}

message StatsMetricMatchIndexSlice {
    sint32 start = 1; // Index of the first value included in the slice. Use a negative value to
                      // indicate the index is relative to the end of the range. Must be <= to the
                      // end index.
    sint32 end = 2; // Index of the last value included in the slice. Use a negative value to
                    // indicate the index is relative to the end of the range. Must be >= to the
                    // start index.
    uint32 step = 3; // Increment applied from the start index until, and not exceeding, the end.
                     // The step size must be a positive integer. A value of 0 is interpreted as 1.
                     // Since the intent is for filtering rather than sorting, using a negative step
                     // to reverse the sequence is not supported.
}

message StatsMetricMatchIndices {
    // Restricts which indices of an array metric are to be included. If the union of all slices is
    // empty, the metric is not matched. All singleton (non-array) metrics will not be matched.
    // Leave the list empty to match only singleton (non-array) metrics.
    repeated StatsMetricMatchIndexSlice slices = 1;
}

message StatsMetricMatchLabel {
    // The result of the key and value matches are logically ANDed.
    StatsMetricMatchString key = 1; // Leave unset to wildard.
    StatsMetricMatchString value = 2; // Leave unset to wildcard.
}

message StatsMetricMatch {
    oneof attribute { // Acts as a wildcard when unset.
        StatsMetricType type = 1; // Restrict to metrics of this type.
        StatsMetricMatchString domain = 2; // Restrict the domain containing a metric.
        StatsMetricMatchString zone = 3; // Restrict the zone containing a metric.
        StatsMetricMatchString block = 4; // Restrict of the block containing a metric.
        StatsMetricMatchString name = 5; // Restrict the name of the metric.
        StatsMetricMatchIndices indices = 6; // Restrict the range of indices deemed valid.
        StatsMetricMatchLabel label = 7; // Restrict which labels are possessed by a metric.
    }
}

message StatsMetricFilter {
    // Covenience structure used solely to work around the inability to include "repeated" fields
    // within a "oneof". Defined this way to leverage self-referential nesting.
    message Set {
        repeated StatsMetricFilter members = 1;
    }

    bool negated = 1; // Logical negation of the final result after computing the term.
    oneof term { // Acts as a wildcard when unset.
        StatsMetricMatch match = 10; // Match a singular metric attribute.
        StatsMetricFilter.Set any_set = 11; // Logical OR of filters.
        StatsMetricFilter.Set all_set = 12; // Logical AND of filters.
    }
}

message StatsFilters {
    // This field is no longer supported and will be ignored. Use the metric_filter field instead.
    repeated StatsMetricType metric_types = 1 [deprecated = true];

    bool non_zero = 2; // Restrict metrics to those whose value is not zero. This check is applied
                       // before any other filters.

    StatsMetricFilter metric_filter = 3; // Logical expression used to restrict metrics by matching
                                         // on various attributes. Leave unset to match all.

    bool with_labels = 4; // Include the labels associated with each metric value.
}

message StatsRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
    StatsFilters filters = 2; // Filters to restrict statistics on get operations.
                              // Leave unset for all statistics.
}

message StatsResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
    Stats stats = 3;
}

//--------------------------------------------------------------------------------------------------
enum DefaultsProfile {
    DS_UNKNOWN = 0;
    DS_ONE_TO_ONE = 1;
}

message DefaultsRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
    DefaultsProfile profile = 2;
}

message DefaultsResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
}

//--------------------------------------------------------------------------------------------------
message DevicePciInfo {
    string bus_id = 1;
    uint32 vendor_id = 2; // Only low 16-bits are valid (uint16 not supported by protobuf).
    uint32 device_id = 3; // Only low 16-bits are valid (uint16 not supported by protobuf).
}

message DeviceBuildEnvironment {
    string hw_version = 1;
    string fw_version = 2;
    string sw_version = 3;
}

message DeviceBuildInfo {
    uint32 number = 1; // Value from syscfg.usr_access.
    uint32 status = 2; // Value from syscfg.build_status.
    repeated uint32 dna = 3; // Array of length 3, value from syscfg.dna[3] (same ordering).
    DeviceBuildEnvironment env = 4; // Environment variables used during the build.
}

message DeviceCardInfo {
    string name = 1;
    string profile = 2;
    string serial_number = 3;
    string revision = 4;
    string sc_version = 5;

    string fan_presence = 10;
    uint32 total_power_avail = 11; // in Watts
    string config_mode = 12;

    repeated string cage_types = 20;

    repeated string mac_addrs = 30;
}

message DeviceInfo {
    DevicePciInfo pci = 1;
    DeviceBuildInfo build = 2;
    DeviceCardInfo card = 3;
}

message DeviceInfoRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
}

message DeviceInfoResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
    DeviceInfo info = 3;
}

message DeviceSystemMonitor {
    uint32 index = 1; // System monitor index.
    float temperature = 2; // Value from sysmon0.temperature.
}

message DeviceStatusAlarm {
    string source = 1;
    string name = 2;
    bool active = 3;
}

message DeviceStatusMonitor {
    string source = 1;
    string name = 2;
    double value = 3;
}

message DeviceStatus {
    // Reserve deprecated field numbers and names.
    reserved 1;
    reserved "sysmons";

    repeated DeviceStatusMonitor monitors = 2;
    repeated DeviceStatusAlarm alarms = 3;
}

message DeviceStatusRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
}

message DeviceStatusResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
    DeviceStatus status = 3;
}

//--------------------------------------------------------------------------------------------------
enum HostFunctionType {
    HOST_FUNC_UNKNOWN = 0;
    HOST_FUNC_PHYSICAL = 1;
    HOST_FUNC_VIRTUAL = 2;
}

message HostFunctionId {
    HostFunctionType ftype = 1;
    uint32 index = 2;
}

message HostFunctionDmaConfig {
    HostFunctionId func_id = 1;
    uint32 base_queue = 2;
    uint32 num_queues = 3;
}

message HostDmaConfig {
    repeated HostFunctionDmaConfig functions = 1;
    bool reset = 2; // Reset all function DMA configuration prior to applying new settings (if any).
}

message HostFlowControl {
    sint32 egress_threshold = 1; // FIFO fill level threshold at which to assert egress flow control.
                                 // Set to -1 for unlimited.
}

message HostConfig {
    HostDmaConfig dma = 1;
    HostFlowControl flow_control = 2;
}

message HostConfigRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
    sint32 host_id = 2; // 0-based index. Set to -1 for all host interfaces.

    // Configuration data used for set operations. Leave unset for get operations.
    HostConfig config = 3;
}

message HostConfigResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
    uint32 host_id = 3;

    // Configuration data returned on get operations. Will be unset for set operations.
    HostConfig config = 4;
}

message HostStatsRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
    sint32 host_id = 2; // 0-based index. Set to -1 for all host interfaces.
    StatsFilters filters = 3; // Filters to restrict statistics on get operations.
                              // Leave unset for all counter statistics.
}

message HostStatsResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
    uint32 host_id = 3;
    Stats stats = 4;
}

//--------------------------------------------------------------------------------------------------
enum ModuleGpioState {
    GPIO_STATE_UNKNOWN = 0;
    GPIO_STATE_ASSERT = 1;
    GPIO_STATE_DEASSERT = 2;
}

message ModuleGpio {
    // An enum is used instead of a bool in order to allow the server to detect which GPIOs
    // are being modified during set operations.
    ModuleGpioState reset = 1;          // read/write
    ModuleGpioState low_power_mode = 2; // read/write
    ModuleGpioState select = 3;         // read-only
    ModuleGpioState present = 4;        // read-only
    ModuleGpioState interrupt = 5;      // read-only
}

message ModuleGpioRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
    sint32 mod_id = 2; // 0-based index. Set to -1 for all modules.

    // Configuration data used for set operations. Leave unset for get operations.
    ModuleGpio gpio = 3;
}

message ModuleGpioResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
    uint32 mod_id = 3;

    // Configuration data returned on get operations. Will be unset for set operations.
    ModuleGpio gpio = 4;
}

message ModuleInfoVendorDate {
    string year = 1;
    string month = 2;
    string day = 3;
    string vendor = 4;
}

message ModuleInfoVendor {
    string name = 1;
    string oui = 2;
    string revision = 3;
    string part_number = 4;
    string serial_number = 5;
    string clei = 6;
    ModuleInfoVendorDate date = 7;
}

message ModuleInfoSpecComplianceFibre {
    repeated string length = 1; // List of support fibre lengths. May be empty.
    repeated string tx_technology = 2; // List of support fibre Tx technology types. May be empty.
    repeated string media = 3; // List of support fibre media types. May be empty.
    repeated string speed = 4; // List of support fibre speeds. May be empty.
}

message ModuleInfoSpecCompliance {
    repeated string ethernet = 1; // List of supported ethernet types. May be empty.
    repeated string sonet = 2; // List of supported SONET types. May be empty.
    repeated string sas = 3; // List of supported SAS types. May be empty.
    repeated string gigabit_ethernet = 4; // List of supported GigaBit ethernet types. May be empty.
    ModuleInfoSpecComplianceFibre fibre = 5;
}

message ModuleInfoDeviceIdentifier {
    string identifier = 1;
    string revision_compliance = 2;
    bytes optional_upper_pages = 3; // List of supported upper pages (each byte is a page number).
    uint32 power_class = 4;
    bool rx_cdr = 5;
    bool tx_cdr = 6;
    string connector_type = 7;
    string encoding = 8;
    uint32 baud_rate = 9; // in Megabaud
    ModuleInfoSpecCompliance spec_compliance = 10;
}

message ModuleInfoDevice {
    ModuleInfoDeviceIdentifier identifier = 1;
}

message ModuleInfo {
    ModuleInfoVendor vendor = 1;
    ModuleInfoDevice device = 2;
}

message ModuleInfoRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
    sint32 mod_id = 2; // 0-based index. Set to -1 for all modules.
}

message ModuleInfoResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
    uint32 mod_id = 3;
    ModuleInfo info = 4;
}

message ModuleMem {
    uint32 offset = 1; // Offset into the 256 byte module memory. Memory is divided in 2 128 byte
                       // pages, where the lower page (bytes 0-127) are fixed and the upper page
                       // (bytes 128-255) are dynamically selected by the page index.
    uint32 page = 2;   // Index used to select one of 256 possible dynamic upper memory pages. Only
                       // needed when accessing bytes in the offset range 128-255.
    uint32 count = 3;  // For get operations, indicates the number of bytes to read starting from
                       // the given offset. Must not exceed 256 bytes (offset + count <= 256).
                       // Not used for set operations.
    bytes data = 4;    // Bytes returned on get operations or given for set operations.
}

message ModuleMemRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
    sint32 mod_id = 2; // 0-based index. Set to -1 for all modules.
    ModuleMem mem = 3;
}

message ModuleMemResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
    uint32 mod_id = 3;
    ModuleMem mem = 4;        // Data returned on get operations. Will be unset for set operations.
}

message ModuleStatusAlarm {
    string name = 1;
    bool active = 2;
}

message ModuleStatusMonitor {
    string name = 1;
    double value = 2;
}

message ModuleStatus {
    repeated ModuleStatusAlarm alarms = 1;
    repeated ModuleStatusMonitor monitors = 2;
}

message ModuleStatusRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
    sint32 mod_id = 2; // 0-based index. Set to -1 for all modules.
}

message ModuleStatusResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
    uint32 mod_id = 3;
    ModuleStatus status = 4;
}

//--------------------------------------------------------------------------------------------------
enum PortState {
    PORT_STATE_UNKNOWN = 0; // Field is unset.
    PORT_STATE_DISABLE = 1;
    PORT_STATE_ENABLE = 2;
}

enum PortFec {
    PORT_FEC_UNKNOWN = 0; // Field is unset.
    PORT_FEC_NONE = 1;
    PORT_FEC_REED_SOLOMON = 2;
}

enum PortLoopback {
    PORT_LOOPBACK_UNKNOWN = 0; // Field is unset.
    PORT_LOOPBACK_NONE = 1;
    PORT_LOOPBACK_NEAR_END_PMA = 2;
}

message PortFlowControl {
    sint32 egress_threshold = 1; // FIFO fill level threshold at which to assert egress flow control.
                                 // Set to -1 for unlimited.
}

message PortConfig {
    PortState state = 1;
    PortFec fec = 2;
    PortLoopback loopback = 3;
    PortFlowControl flow_control = 4;
}

message PortConfigRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
    sint32 port_id = 2; // 0-based index. Set to -1 for all ports.

    // Configuration data used for set operations. Leave unset for get operations.
    PortConfig config = 3;
}

message PortConfigResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
    uint32 port_id = 3;

    // Configuration data returned on get operations. Will be unset for set operations.
    PortConfig config = 4;
}

enum PortLink {
    PORT_LINK_UNKNOWN = 0; // Field is unset.
    PORT_LINK_DOWN = 1;
    PORT_LINK_UP = 2;
}

message PortStatus {
    PortLink link = 1;
}

message PortStatusRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
    sint32 port_id = 2; // 0-based index. Set to -1 for all ports.
}

message PortStatusResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
    uint32 port_id = 3;
    PortStatus status = 4;
}

message PortStatsRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
    sint32 port_id = 2; // 0-based index. Set to -1 for all ports.
    StatsFilters filters = 3; // Filters to restrict statistics on get operations.
                              // Leave unset for all counter statistics.
}

message PortStatsResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
    uint32 port_id = 3;
    Stats stats = 4;
}

//--------------------------------------------------------------------------------------------------
enum SwitchInterface {
    SW_INTF_UNKNOWN = 0; // Field is unset.
    SW_INTF_PHYSICAL = 1;
    SW_INTF_TEST = 2;
}

enum SwitchDestination {
    SW_DEST_UNKNOWN = 0; // Field is unset.
    SW_DEST_BYPASS = 1;
    SW_DEST_DROP = 2;
    SW_DEST_APP = 3;
}

message SwitchIngressSelector {
    uint32 index = 1; // 0-based port index.
    SwitchInterface intf = 2;
    SwitchDestination dest = 3;
}

message SwitchEgressSelector {
    uint32 index = 1; // 0-based port index.
    SwitchInterface intf = 2;
}

enum SwitchBypassMode {
    SW_BYPASS_UNKNOWN = 0; // Field is unset.
    SW_BYPASS_STRAIGHT = 1;
    SW_BYPASS_SWAP = 2;
}

message SwitchConfig {
    // Array containing one selector per ingress port.
    repeated SwitchIngressSelector ingress_selectors = 1;

    // Array containing one selector per egress port.
    repeated SwitchEgressSelector egress_selectors = 2;

    SwitchBypassMode bypass_mode = 3;
}

message SwitchConfigRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.

    // Configuration data used for set operations. Leave unset for get operations.
    SwitchConfig config = 2;
}

message SwitchConfigResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;

    // Configuration data returned on get operations. Will be unset for set operations.
    SwitchConfig config = 3;
}

message SwitchStatsRequest {
    sint32 dev_id = 1; // 0-based index. Set to -1 for all devices.
    StatsFilters filters = 2; // Filters to restrict statistics on get operations.
                              // Leave unset for all counter statistics.
}

message SwitchStatsResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    uint32 dev_id = 2;
    Stats stats = 3;
}

//--------------------------------------------------------------------------------------------------
message ServerStatus {
    google.protobuf.Timestamp start_time = 1; // UTC wall clock.
    google.protobuf.Duration up_time = 2; // Diff of monotonic system clock.
}

message ServerStatusRequest {
}

message ServerStatusResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    ServerStatus status = 2;
}

enum ServerDebugFlag {
    DEBUG_FLAG_UNKNOWN = 0;
    DEBUG_FLAG_BATCH = 1;
    DEBUG_FLAG_STATS = 10;
}

message ServerDebug {
    repeated ServerDebugFlag enables = 1;
    repeated ServerDebugFlag disables = 2;
}

enum ServerControlStatsFlag {
    CTRL_STATS_FLAG_UNKNOWN = 0;

    CTRL_STATS_FLAG_DOMAIN_COUNTERS = 1;
    CTRL_STATS_FLAG_DOMAIN_MONITORS = 2;
    CTRL_STATS_FLAG_DOMAIN_MODULES = 3;

    CTRL_STATS_FLAG_ZONE_CARD_MONITORS = 10;
    CTRL_STATS_FLAG_ZONE_SYSMON_MONITORS = 20;
    CTRL_STATS_FLAG_ZONE_HOST_COUNTERS = 30;
    CTRL_STATS_FLAG_ZONE_PORT_COUNTERS = 40;
    CTRL_STATS_FLAG_ZONE_SWITCH_COUNTERS = 50;
    CTRL_STATS_FLAG_ZONE_MODULE_MONITORS = 60;
}

message ServerControlStats {
    repeated ServerControlStatsFlag enables = 1;
    repeated ServerControlStatsFlag disables = 2;
}

message ServerControl {
    ServerControlStats stats = 1;
}

message ServerConfig {
    ServerDebug debug = 1;
    ServerControl control = 2;
}

message ServerConfigRequest {
    // Configuration data used for set operations. Leave unset for get operations.
    ServerConfig config = 1;
}

message ServerConfigResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.

    // Configuration data returned on get operations. Will be unset for set operations.
    ServerConfig config = 2;
}

//--------------------------------------------------------------------------------------------------
enum BatchOperation {
    BOP_UNKNOWN = 0; // Field is unset.
    BOP_GET = 1;
    BOP_SET = 2;
    BOP_CLEAR = 3;
}

message BatchRequest {
    BatchOperation op = 1;

    // Field IDs 2-9 are reserved for future use.

    oneof item {
        // General device configuration.
        DeviceInfoRequest device_info = 10;
        DeviceStatusRequest device_status = 11;

        // Host configuration.
        HostConfigRequest host_config = 20;
        HostStatsRequest host_stats = 21;

        // Port configuration.
        PortConfigRequest port_config = 30;
        PortStatusRequest port_status = 31;
        PortStatsRequest port_stats = 32;

        // Switch configuration.
        SwitchConfigRequest switch_config = 40;
        SwitchStatsRequest switch_stats = 41;

        // Preset defaults configuration.
        DefaultsRequest defaults = 50;

        // Statistics configuration.
        StatsRequest stats = 60;

        // Module configuration.
        ModuleInfoRequest module_info = 70;
        ModuleStatusRequest module_status = 71;
        ModuleMemRequest module_mem = 72;
        ModuleGpioRequest module_gpio = 73;

        // Server configuration.
        ServerStatusRequest server_status = 80;
        ServerConfigRequest server_config = 81;
    };
}

message BatchResponse {
    ErrorCode error_code = 1; // Must be EC_OK before accessing remaining fields.
    BatchOperation op = 2;

    // Field IDs 2-9 are reserved for future use.

    oneof item {
        // General device configuration.
        DeviceInfoResponse device_info = 10;
        DeviceStatusResponse device_status = 11;

        // Host configuration.
        HostConfigResponse host_config = 20;
        HostStatsResponse host_stats = 21;

        // Port configuration.
        PortConfigResponse port_config = 30;
        PortStatusResponse port_status = 31;
        PortStatsResponse port_stats = 32;

        // Switch configuration.
        SwitchConfigResponse switch_config = 40;
        SwitchStatsResponse switch_stats = 41;

        // Preset defaults configuration.
        DefaultsResponse defaults = 50;

        // Statistics configuration.
        StatsResponse stats = 60;

        // Module configuration.
        ModuleInfoResponse module_info = 70;
        ModuleStatusResponse module_status = 71;
        ModuleMemResponse module_mem = 72;
        ModuleGpioResponse module_gpio = 73;

        // Server configuration.
        ServerStatusResponse server_status = 80;
        ServerConfigResponse server_config = 81;
    };
}

//--------------------------------------------------------------------------------------------------
service SmartnicConfig {
    // Batching of multiple RPCs.
    rpc Batch(stream BatchRequest) returns (stream BatchResponse);

    // Preset defaults configuration.
    rpc SetDefaults(DefaultsRequest) returns (stream DefaultsResponse);

    // General device configuration.
    rpc GetDeviceInfo(DeviceInfoRequest) returns (stream DeviceInfoResponse);
    rpc GetDeviceStatus(DeviceStatusRequest) returns (stream DeviceStatusResponse);

    // Host configuration.
    rpc GetHostConfig(HostConfigRequest) returns (stream HostConfigResponse);
    rpc SetHostConfig(HostConfigRequest) returns (stream HostConfigResponse);
    rpc GetHostStats(HostStatsRequest) returns (stream HostStatsResponse);
    rpc ClearHostStats(HostStatsRequest) returns (stream HostStatsResponse);

    // Module configuration.
    rpc GetModuleGpio(ModuleGpioRequest) returns (stream ModuleGpioResponse);
    rpc SetModuleGpio(ModuleGpioRequest) returns (stream ModuleGpioResponse);
    rpc GetModuleInfo(ModuleInfoRequest) returns (stream ModuleInfoResponse);
    rpc GetModuleMem(ModuleMemRequest) returns (stream ModuleMemResponse);
    rpc SetModuleMem(ModuleMemRequest) returns (stream ModuleMemResponse);
    rpc GetModuleStatus(ModuleStatusRequest) returns (stream ModuleStatusResponse);

    // Port configuration.
    rpc GetPortConfig(PortConfigRequest) returns (stream PortConfigResponse);
    rpc SetPortConfig(PortConfigRequest) returns (stream PortConfigResponse);
    rpc GetPortStatus(PortStatusRequest) returns (stream PortStatusResponse);
    rpc GetPortStats(PortStatsRequest) returns (stream PortStatsResponse);
    rpc ClearPortStats(PortStatsRequest) returns (stream PortStatsResponse);

    // Statistics configuration.
    rpc GetStats(StatsRequest) returns (stream StatsResponse);
    rpc ClearStats(StatsRequest) returns (stream StatsResponse);

    // Switch configuration.
    rpc GetSwitchConfig(SwitchConfigRequest) returns (stream SwitchConfigResponse);
    rpc SetSwitchConfig(SwitchConfigRequest) returns (stream SwitchConfigResponse);
    rpc GetSwitchStats(SwitchStatsRequest) returns (stream SwitchStatsResponse);
    rpc ClearSwitchStats(SwitchStatsRequest) returns (stream SwitchStatsResponse);

    // Server configuration.
    rpc GetServerConfig(ServerConfigRequest) returns (stream ServerConfigResponse);
    rpc SetServerConfig(ServerConfigRequest) returns (stream ServerConfigResponse);
    rpc GetServerStatus(ServerStatusRequest) returns (stream ServerStatusResponse);
}

